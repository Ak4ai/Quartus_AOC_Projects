// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/21/2024 22:53:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mic1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mic1_vlg_sample_tst(
	CLOCK,
	LOADN,
	sampler_tx
);
input  CLOCK;
input  LOADN;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or LOADN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mic1_vlg_check_tst (
	C_BUS,
	DATA_MEM_ADDR,
	DATA_MEM_IN,
	DATA_MEM_OUT,
	DATA_MEM_write_enable,
	MBR_OUT,
	MIR,
	MPC,
	PC,
	PROG_MEM_IN,
	sampler_rx
);
input [31:0] C_BUS;
input [31:0] DATA_MEM_ADDR;
input [31:0] DATA_MEM_IN;
input [31:0] DATA_MEM_OUT;
input  DATA_MEM_write_enable;
input [7:0] MBR_OUT;
input [35:0] MIR;
input [8:0] MPC;
input [31:0] PC;
input [7:0] PROG_MEM_IN;
input sampler_rx;

reg [31:0] C_BUS_expected;
reg [31:0] DATA_MEM_ADDR_expected;
reg [31:0] DATA_MEM_IN_expected;
reg [31:0] DATA_MEM_OUT_expected;
reg  DATA_MEM_write_enable_expected;
reg [7:0] MBR_OUT_expected;
reg [35:0] MIR_expected;
reg [8:0] MPC_expected;
reg [31:0] PC_expected;
reg [7:0] PROG_MEM_IN_expected;

reg [31:0] C_BUS_prev;
reg [31:0] DATA_MEM_ADDR_prev;
reg [31:0] DATA_MEM_IN_prev;
reg [31:0] DATA_MEM_OUT_prev;
reg  DATA_MEM_write_enable_prev;
reg [7:0] MBR_OUT_prev;
reg [35:0] MIR_prev;
reg [8:0] MPC_prev;
reg [31:0] PC_prev;
reg [7:0] PROG_MEM_IN_prev;

reg [31:0] C_BUS_expected_prev;
reg [31:0] DATA_MEM_ADDR_expected_prev;
reg [31:0] DATA_MEM_OUT_expected_prev;
reg  DATA_MEM_write_enable_expected_prev;
reg [7:0] MBR_OUT_expected_prev;
reg [35:0] MIR_expected_prev;
reg [8:0] MPC_expected_prev;
reg [31:0] PC_expected_prev;

reg [31:0] last_C_BUS_exp;
reg [31:0] last_DATA_MEM_ADDR_exp;
reg [31:0] last_DATA_MEM_OUT_exp;
reg  last_DATA_MEM_write_enable_exp;
reg [7:0] last_MBR_OUT_exp;
reg [35:0] last_MIR_exp;
reg [8:0] last_MPC_exp;
reg [31:0] last_PC_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_BUS_prev = C_BUS;
	DATA_MEM_ADDR_prev = DATA_MEM_ADDR;
	DATA_MEM_IN_prev = DATA_MEM_IN;
	DATA_MEM_OUT_prev = DATA_MEM_OUT;
	DATA_MEM_write_enable_prev = DATA_MEM_write_enable;
	MBR_OUT_prev = MBR_OUT;
	MIR_prev = MIR;
	MPC_prev = MPC;
	PC_prev = PC;
	PROG_MEM_IN_prev = PROG_MEM_IN;
end

// update expected /o prevs

always @(trigger)
begin
	C_BUS_expected_prev = C_BUS_expected;
	DATA_MEM_ADDR_expected_prev = DATA_MEM_ADDR_expected;
	DATA_MEM_OUT_expected_prev = DATA_MEM_OUT_expected;
	DATA_MEM_write_enable_expected_prev = DATA_MEM_write_enable_expected;
	MBR_OUT_expected_prev = MBR_OUT_expected;
	MIR_expected_prev = MIR_expected;
	MPC_expected_prev = MPC_expected;
	PC_expected_prev = PC_expected;
end


// expected DATA_MEM_ADDR[ 31 ]
initial
begin
	DATA_MEM_ADDR_expected[31] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 30 ]
initial
begin
	DATA_MEM_ADDR_expected[30] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 29 ]
initial
begin
	DATA_MEM_ADDR_expected[29] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 28 ]
initial
begin
	DATA_MEM_ADDR_expected[28] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 27 ]
initial
begin
	DATA_MEM_ADDR_expected[27] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 26 ]
initial
begin
	DATA_MEM_ADDR_expected[26] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 25 ]
initial
begin
	DATA_MEM_ADDR_expected[25] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 24 ]
initial
begin
	DATA_MEM_ADDR_expected[24] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 23 ]
initial
begin
	DATA_MEM_ADDR_expected[23] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 22 ]
initial
begin
	DATA_MEM_ADDR_expected[22] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 21 ]
initial
begin
	DATA_MEM_ADDR_expected[21] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 20 ]
initial
begin
	DATA_MEM_ADDR_expected[20] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 19 ]
initial
begin
	DATA_MEM_ADDR_expected[19] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 18 ]
initial
begin
	DATA_MEM_ADDR_expected[18] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 17 ]
initial
begin
	DATA_MEM_ADDR_expected[17] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 16 ]
initial
begin
	DATA_MEM_ADDR_expected[16] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 15 ]
initial
begin
	DATA_MEM_ADDR_expected[15] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 14 ]
initial
begin
	DATA_MEM_ADDR_expected[14] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 13 ]
initial
begin
	DATA_MEM_ADDR_expected[13] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 12 ]
initial
begin
	DATA_MEM_ADDR_expected[12] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 11 ]
initial
begin
	DATA_MEM_ADDR_expected[11] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 10 ]
initial
begin
	DATA_MEM_ADDR_expected[10] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 9 ]
initial
begin
	DATA_MEM_ADDR_expected[9] = 1'b0;
	DATA_MEM_ADDR_expected[9] = #790044 1'b1;
	DATA_MEM_ADDR_expected[9] = #100000 1'b0;
	DATA_MEM_ADDR_expected[9] = #700000 1'b1;
	DATA_MEM_ADDR_expected[9] = #100000 1'b0;
end 
// expected DATA_MEM_ADDR[ 8 ]
initial
begin
	DATA_MEM_ADDR_expected[8] = 1'b0;
	DATA_MEM_ADDR_expected[8] = #789748 1'b1;
	DATA_MEM_ADDR_expected[8] = #100000 1'b0;
	DATA_MEM_ADDR_expected[8] = #700000 1'b1;
	DATA_MEM_ADDR_expected[8] = #100000 1'b0;
end 
// expected DATA_MEM_ADDR[ 7 ]
initial
begin
	DATA_MEM_ADDR_expected[7] = 1'b0;
	DATA_MEM_ADDR_expected[7] = #789733 1'b1;
	DATA_MEM_ADDR_expected[7] = #100000 1'b0;
	DATA_MEM_ADDR_expected[7] = #700000 1'b1;
	DATA_MEM_ADDR_expected[7] = #100000 1'b0;
end 
// expected DATA_MEM_ADDR[ 6 ]
initial
begin
	DATA_MEM_ADDR_expected[6] = 1'b0;
	DATA_MEM_ADDR_expected[6] = #789996 1'b1;
end 
// expected DATA_MEM_ADDR[ 5 ]
initial
begin
	DATA_MEM_ADDR_expected[5] = 1'b0;
	DATA_MEM_ADDR_expected[5] = #790071 1'b1;
	DATA_MEM_ADDR_expected[5] = #100000 1'b0;
	DATA_MEM_ADDR_expected[5] = #700000 1'b1;
	DATA_MEM_ADDR_expected[5] = #100000 1'b0;
end 
// expected DATA_MEM_ADDR[ 4 ]
initial
begin
	DATA_MEM_ADDR_expected[4] = 1'b0;
	DATA_MEM_ADDR_expected[4] = #790191 1'b1;
	DATA_MEM_ADDR_expected[4] = #100000 1'b0;
	DATA_MEM_ADDR_expected[4] = #700000 1'b1;
	DATA_MEM_ADDR_expected[4] = #100000 1'b0;
end 
// expected DATA_MEM_ADDR[ 3 ]
initial
begin
	DATA_MEM_ADDR_expected[3] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 2 ]
initial
begin
	DATA_MEM_ADDR_expected[2] = 1'b0;
	DATA_MEM_ADDR_expected[2] = #2889719 1'b1;
	DATA_MEM_ADDR_expected[2] = #400000 1'b0;
	DATA_MEM_ADDR_expected[2] = #400000 1'b1;
	DATA_MEM_ADDR_expected[2] = #300000 1'b0;
end 
// expected DATA_MEM_ADDR[ 1 ]
initial
begin
	DATA_MEM_ADDR_expected[1] = 1'b0;
	DATA_MEM_ADDR_expected[1] = #1690154 1'b1;
	DATA_MEM_ADDR_expected[1] = #500000 1'b0;
	DATA_MEM_ADDR_expected[1] = #100000 1'b1;
	DATA_MEM_ADDR_expected[1] = #600000 1'b0;
	DATA_MEM_ADDR_expected[1] = #400000 1'b1;
	DATA_MEM_ADDR_expected[1] = #400000 1'b0;
	DATA_MEM_ADDR_expected[1] = #300000 1'b1;
end 
// expected DATA_MEM_ADDR[ 0 ]
initial
begin
	DATA_MEM_ADDR_expected[0] = 1'b0;
	DATA_MEM_ADDR_expected[0] = #889733 1'b1;
	DATA_MEM_ADDR_expected[0] = #800000 1'b0;
	DATA_MEM_ADDR_expected[0] = #500000 1'b1;
	DATA_MEM_ADDR_expected[0] = #600000 1'b0;
	DATA_MEM_ADDR_expected[0] = #500000 1'b1;
	DATA_MEM_ADDR_expected[0] = #400000 1'b0;
	DATA_MEM_ADDR_expected[0] = #300000 1'b1;
end 
// expected DATA_MEM_OUT[ 31 ]
initial
begin
	DATA_MEM_OUT_expected[31] = 1'b0;
end 
// expected DATA_MEM_OUT[ 30 ]
initial
begin
	DATA_MEM_OUT_expected[30] = 1'b0;
end 
// expected DATA_MEM_OUT[ 29 ]
initial
begin
	DATA_MEM_OUT_expected[29] = 1'b0;
end 
// expected DATA_MEM_OUT[ 28 ]
initial
begin
	DATA_MEM_OUT_expected[28] = 1'b0;
	DATA_MEM_OUT_expected[28] = #4190390 1'b1;
end 
// expected DATA_MEM_OUT[ 27 ]
initial
begin
	DATA_MEM_OUT_expected[27] = 1'b0;
	DATA_MEM_OUT_expected[27] = #1689918 1'b1;
	DATA_MEM_OUT_expected[27] = #600000 1'b0;
	DATA_MEM_OUT_expected[27] = #600000 1'b1;
	DATA_MEM_OUT_expected[27] = #500000 1'b0;
	DATA_MEM_OUT_expected[27] = #100000 1'b1;
end 
// expected DATA_MEM_OUT[ 26 ]
initial
begin
	DATA_MEM_OUT_expected[26] = 1'b0;
	DATA_MEM_OUT_expected[26] = #890420 1'b1;
	DATA_MEM_OUT_expected[26] = #800000 1'b0;
	DATA_MEM_OUT_expected[26] = #600000 1'b1;
	DATA_MEM_OUT_expected[26] = #600000 1'b0;
	DATA_MEM_OUT_expected[26] = #500000 1'b1;
	DATA_MEM_OUT_expected[26] = #800000 1'b0;
end 
// expected DATA_MEM_OUT[ 25 ]
initial
begin
	DATA_MEM_OUT_expected[25] = 1'b0;
end 
// expected DATA_MEM_OUT[ 24 ]
initial
begin
	DATA_MEM_OUT_expected[24] = 1'b0;
end 
// expected DATA_MEM_OUT[ 23 ]
initial
begin
	DATA_MEM_OUT_expected[23] = 1'b0;
end 
// expected DATA_MEM_OUT[ 22 ]
initial
begin
	DATA_MEM_OUT_expected[22] = 1'b0;
end 
// expected DATA_MEM_OUT[ 21 ]
initial
begin
	DATA_MEM_OUT_expected[21] = 1'b0;
end 
// expected DATA_MEM_OUT[ 20 ]
initial
begin
	DATA_MEM_OUT_expected[20] = 1'b0;
	DATA_MEM_OUT_expected[20] = #4190940 1'b1;
end 
// expected DATA_MEM_OUT[ 19 ]
initial
begin
	DATA_MEM_OUT_expected[19] = 1'b0;
	DATA_MEM_OUT_expected[19] = #3490083 1'b1;
	DATA_MEM_OUT_expected[19] = #700000 1'b0;
end 
// expected DATA_MEM_OUT[ 18 ]
initial
begin
	DATA_MEM_OUT_expected[18] = 1'b0;
	DATA_MEM_OUT_expected[18] = #1689716 1'b1;
	DATA_MEM_OUT_expected[18] = #600000 1'b0;
	DATA_MEM_OUT_expected[18] = #600000 1'b1;
	DATA_MEM_OUT_expected[18] = #500000 1'b0;
	DATA_MEM_OUT_expected[18] = #800000 1'b1;
end 
// expected DATA_MEM_OUT[ 17 ]
initial
begin
	DATA_MEM_OUT_expected[17] = 1'b0;
	DATA_MEM_OUT_expected[17] = #890148 1'b1;
	DATA_MEM_OUT_expected[17] = #3300000 1'b0;
end 
// expected DATA_MEM_OUT[ 16 ]
initial
begin
	DATA_MEM_OUT_expected[16] = 1'b0;
	DATA_MEM_OUT_expected[16] = #890683 1'b1;
	DATA_MEM_OUT_expected[16] = #2600000 1'b0;
end 
// expected DATA_MEM_OUT[ 15 ]
initial
begin
	DATA_MEM_OUT_expected[15] = 1'b0;
end 
// expected DATA_MEM_OUT[ 14 ]
initial
begin
	DATA_MEM_OUT_expected[14] = 1'b0;
end 
// expected DATA_MEM_OUT[ 13 ]
initial
begin
	DATA_MEM_OUT_expected[13] = 1'b0;
end 
// expected DATA_MEM_OUT[ 12 ]
initial
begin
	DATA_MEM_OUT_expected[12] = 1'b0;
	DATA_MEM_OUT_expected[12] = #4190404 1'b1;
end 
// expected DATA_MEM_OUT[ 11 ]
initial
begin
	DATA_MEM_OUT_expected[11] = 1'b0;
	DATA_MEM_OUT_expected[11] = #3490262 1'b1;
	DATA_MEM_OUT_expected[11] = #700000 1'b0;
end 
// expected DATA_MEM_OUT[ 10 ]
initial
begin
	DATA_MEM_OUT_expected[10] = 1'b0;
	DATA_MEM_OUT_expected[10] = #1690294 1'b1;
	DATA_MEM_OUT_expected[10] = #600000 1'b0;
	DATA_MEM_OUT_expected[10] = #600000 1'b1;
	DATA_MEM_OUT_expected[10] = #500000 1'b0;
end 
// expected DATA_MEM_OUT[ 9 ]
initial
begin
	DATA_MEM_OUT_expected[9] = 1'b0;
	DATA_MEM_OUT_expected[9] = #890200 1'b1;
	DATA_MEM_OUT_expected[9] = #2600000 1'b0;
end 
// expected DATA_MEM_OUT[ 8 ]
initial
begin
	DATA_MEM_OUT_expected[8] = 1'b0;
end 
// expected DATA_MEM_OUT[ 7 ]
initial
begin
	DATA_MEM_OUT_expected[7] = 1'b0;
end 
// expected DATA_MEM_OUT[ 6 ]
initial
begin
	DATA_MEM_OUT_expected[6] = 1'b0;
end 
// expected DATA_MEM_OUT[ 5 ]
initial
begin
	DATA_MEM_OUT_expected[5] = 1'b0;
end 
// expected DATA_MEM_OUT[ 4 ]
initial
begin
	DATA_MEM_OUT_expected[4] = 1'b0;
end 
// expected DATA_MEM_OUT[ 3 ]
initial
begin
	DATA_MEM_OUT_expected[3] = 1'b0;
	DATA_MEM_OUT_expected[3] = #4190014 1'b1;
end 
// expected DATA_MEM_OUT[ 2 ]
initial
begin
	DATA_MEM_OUT_expected[2] = 1'b0;
	DATA_MEM_OUT_expected[2] = #1689969 1'b1;
	DATA_MEM_OUT_expected[2] = #600000 1'b0;
	DATA_MEM_OUT_expected[2] = #600000 1'b1;
	DATA_MEM_OUT_expected[2] = #500000 1'b0;
	DATA_MEM_OUT_expected[2] = #100000 1'b1;
end 
// expected DATA_MEM_OUT[ 1 ]
initial
begin
	DATA_MEM_OUT_expected[1] = 1'b0;
	DATA_MEM_OUT_expected[1] = #3490143 1'b1;
	DATA_MEM_OUT_expected[1] = #700000 1'b0;
end 
// expected DATA_MEM_OUT[ 0 ]
initial
begin
	DATA_MEM_OUT_expected[0] = 1'b0;
	DATA_MEM_OUT_expected[0] = #889820 1'b1;
	DATA_MEM_OUT_expected[0] = #2600000 1'b0;
end 

// expected DATA_MEM_write_enable
initial
begin
	DATA_MEM_write_enable_expected = 1'b0;
	DATA_MEM_write_enable_expected = #988118 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	# 700000;
	repeat(2)
	begin
		DATA_MEM_write_enable_expected = 1'b1;
		DATA_MEM_write_enable_expected = #100000 1'b0;
		# 500000;
	end
	DATA_MEM_write_enable_expected = 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #400000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #200000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #300000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
end 
// expected PC[ 31 ]
initial
begin
	PC_expected[31] = 1'b0;
end 
// expected PC[ 30 ]
initial
begin
	PC_expected[30] = 1'b0;
end 
// expected PC[ 29 ]
initial
begin
	PC_expected[29] = 1'b0;
end 
// expected PC[ 28 ]
initial
begin
	PC_expected[28] = 1'b0;
end 
// expected PC[ 27 ]
initial
begin
	PC_expected[27] = 1'b0;
end 
// expected PC[ 26 ]
initial
begin
	PC_expected[26] = 1'b0;
end 
// expected PC[ 25 ]
initial
begin
	PC_expected[25] = 1'b0;
end 
// expected PC[ 24 ]
initial
begin
	PC_expected[24] = 1'b0;
end 
// expected PC[ 23 ]
initial
begin
	PC_expected[23] = 1'b0;
end 
// expected PC[ 22 ]
initial
begin
	PC_expected[22] = 1'b0;
end 
// expected PC[ 21 ]
initial
begin
	PC_expected[21] = 1'b0;
end 
// expected PC[ 20 ]
initial
begin
	PC_expected[20] = 1'b0;
end 
// expected PC[ 19 ]
initial
begin
	PC_expected[19] = 1'b0;
end 
// expected PC[ 18 ]
initial
begin
	PC_expected[18] = 1'b0;
end 
// expected PC[ 17 ]
initial
begin
	PC_expected[17] = 1'b0;
end 
// expected PC[ 16 ]
initial
begin
	PC_expected[16] = 1'b0;
end 
// expected PC[ 15 ]
initial
begin
	PC_expected[15] = 1'b0;
end 
// expected PC[ 14 ]
initial
begin
	PC_expected[14] = 1'b0;
end 
// expected PC[ 13 ]
initial
begin
	PC_expected[13] = 1'b0;
end 
// expected PC[ 12 ]
initial
begin
	PC_expected[12] = 1'b0;
end 
// expected PC[ 11 ]
initial
begin
	PC_expected[11] = 1'b0;
end 
// expected PC[ 10 ]
initial
begin
	PC_expected[10] = 1'b0;
end 
// expected PC[ 9 ]
initial
begin
	PC_expected[9] = 1'b0;
end 
// expected PC[ 8 ]
initial
begin
	PC_expected[8] = 1'b0;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'b0;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'b0;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'b0;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'b0;
	PC_expected[4] = #4488780 1'b1;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'b0;
	PC_expected[3] = #1989171 1'b1;
	PC_expected[3] = #2500000 1'b0;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'b0;
	PC_expected[2] = #989031 1'b1;
	PC_expected[2] = #1000000 1'b0;
	PC_expected[2] = #1200000 1'b1;
	PC_expected[2] = #1300000 1'b0;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'b0;
	PC_expected[1] = #389371 1'b1;
	PC_expected[1] = #600000 1'b0;
	PC_expected[1] = #300000 1'b1;
	PC_expected[1] = #700000 1'b0;
	PC_expected[1] = #600000 1'b1;
	PC_expected[1] = #600000 1'b0;
	PC_expected[1] = #700000 1'b1;
	PC_expected[1] = #600000 1'b0;
	PC_expected[1] = #400000 1'b1;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'b0;
	PC_expected[0] = #188861 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #500000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #100000 1'b0;
	# 500000;
	repeat(3)
	begin
		PC_expected[0] = 1'b1;
		PC_expected[0] = #200000 1'b0;
		# 400000;
	end
	PC_expected[0] = 1'b1;
	PC_expected[0] = #300000 1'b0;
	PC_expected[0] = #400000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #200000 1'b0;
end 
// expected MBR_OUT[ 7 ]
initial
begin
	MBR_OUT_expected[7] = 1'b0;
end 
// expected MBR_OUT[ 6 ]
initial
begin
	MBR_OUT_expected[6] = 1'b0;
	MBR_OUT_expected[6] = #3088897 1'b1;
	MBR_OUT_expected[6] = #900000 1'b0;
end 
// expected MBR_OUT[ 5 ]
initial
begin
	MBR_OUT_expected[5] = 1'b0;
	MBR_OUT_expected[5] = #3088902 1'b1;
	MBR_OUT_expected[5] = #200000 1'b0;
	MBR_OUT_expected[5] = #400000 1'b1;
	MBR_OUT_expected[5] = #300000 1'b0;
end 
// expected MBR_OUT[ 4 ]
initial
begin
	MBR_OUT_expected[4] = 1'b0;
	# 288690;
	repeat(2)
	begin
		MBR_OUT_expected[4] = 1'b1;
		MBR_OUT_expected[4] = #200000 1'b0;
		# 600000;
	end
	MBR_OUT_expected[4] = 1'b1;
	MBR_OUT_expected[4] = #200000 1'b0;
	MBR_OUT_expected[4] = #400000 1'b1;
	MBR_OUT_expected[4] = #200000 1'b0;
	MBR_OUT_expected[4] = #600000 1'b1;
	MBR_OUT_expected[4] = #400000 1'b0;
end 
// expected MBR_OUT[ 3 ]
initial
begin
	MBR_OUT_expected[3] = 1'b0;
	MBR_OUT_expected[3] = #3289744 1'b1;
	MBR_OUT_expected[3] = #400000 1'b0;
end 
// expected MBR_OUT[ 2 ]
initial
begin
	MBR_OUT_expected[2] = 1'b0;
	MBR_OUT_expected[2] = #1888460 1'b1;
	MBR_OUT_expected[2] = #200000 1'b0;
	MBR_OUT_expected[2] = #400000 1'b1;
	MBR_OUT_expected[2] = #200000 1'b0;
end 
// expected MBR_OUT[ 1 ]
initial
begin
	MBR_OUT_expected[1] = 1'b0;
	MBR_OUT_expected[1] = #288918 1'b1;
	MBR_OUT_expected[1] = #200000 1'b0;
	MBR_OUT_expected[1] = #600000 1'b1;
	MBR_OUT_expected[1] = #200000 1'b0;
	MBR_OUT_expected[1] = #1400000 1'b1;
	MBR_OUT_expected[1] = #400000 1'b0;
end 
// expected MBR_OUT[ 0 ]
initial
begin
	MBR_OUT_expected[0] = 1'b0;
	MBR_OUT_expected[0] = #289511 1'b1;
	MBR_OUT_expected[0] = #200000 1'b0;
	MBR_OUT_expected[0] = #600000 1'b1;
	MBR_OUT_expected[0] = #200000 1'b0;
	MBR_OUT_expected[0] = #100000 1'b1;
	MBR_OUT_expected[0] = #1300000 1'b0;
	MBR_OUT_expected[0] = #600000 1'b1;
	MBR_OUT_expected[0] = #400000 1'b0;
end 
// expected MIR[ 35 ]
initial
begin
	MIR_expected[35] = 1'b0;
end 
// expected MIR[ 34 ]
initial
begin
	MIR_expected[34] = 1'b0;
end 
// expected MIR[ 33 ]
initial
begin
	MIR_expected[33] = 1'b0;
	MIR_expected[33] = #3209973 1'b1;
	MIR_expected[33] = #200000 1'b0;
	MIR_expected[33] = #200000 1'b1;
	MIR_expected[33] = #100000 1'b0;
	MIR_expected[33] = #200000 1'b1;
	MIR_expected[33] = #200000 1'b0;
end 
// expected MIR[ 32 ]
initial
begin
	MIR_expected[32] = 1'b0;
	MIR_expected[32] = #3209870 1'b1;
	MIR_expected[32] = #200000 1'b0;
	MIR_expected[32] = #500000 1'b1;
	MIR_expected[32] = #200000 1'b0;
end 
// expected MIR[ 31 ]
initial
begin
	MIR_expected[31] = 1'b0;
	# 410037;
	repeat(2)
	begin
		MIR_expected[31] = 1'b1;
		MIR_expected[31] = #600000 1'b0;
		# 200000;
	end
	MIR_expected[31] = 1'b1;
	MIR_expected[31] = #400000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #400000 1'b0;
	MIR_expected[31] = #600000 1'b1;
	MIR_expected[31] = #100000 1'b0;
end 
// expected MIR[ 30 ]
initial
begin
	MIR_expected[30] = 1'b0;
	MIR_expected[30] = #510103 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #100000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #300000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	# 100000;
	repeat(2)
	begin
		MIR_expected[30] = 1'b1;
		MIR_expected[30] = #200000 1'b0;
		# 400000;
	end
	MIR_expected[30] = 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #600000 1'b1;
	MIR_expected[30] = #100000 1'b0;
end 
// expected MIR[ 29 ]
initial
begin
	MIR_expected[29] = 1'b0;
	# 410456;
	repeat(2)
	begin
		MIR_expected[29] = 1'b1;
		MIR_expected[29] = #100000 1'b0;
		MIR_expected[29] = #200000 1'b1;
		MIR_expected[29] = #100000 1'b0;
		# 400000;
	end
	MIR_expected[29] = 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #400000 1'b1;
	MIR_expected[29] = #200000 1'b0;
end 
// expected MIR[ 28 ]
initial
begin
	MIR_expected[28] = 1'b1;
	MIR_expected[28] = #110327 1'b0;
	# 100000;
	repeat(2)
	begin
		MIR_expected[28] = 1'b1;
		MIR_expected[28] = #100000 1'b0;
		MIR_expected[28] = #200000 1'b1;
		MIR_expected[28] = #300000 1'b0;
		# 200000;
	end
	repeat(2)
	begin
		MIR_expected[28] = 1'b1;
		MIR_expected[28] = #100000 1'b0;
		MIR_expected[28] = #100000 1'b1;
		MIR_expected[28] = #200000 1'b0;
		# 200000;
	end
	MIR_expected[28] = 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #200000 1'b0;
	MIR_expected[28] = #100000 1'b1;
	MIR_expected[28] = #200000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	# 200000;
	repeat(3)
	begin
		MIR_expected[28] = 1'b0;
		MIR_expected[28] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[28] = 1'b0;
	MIR_expected[28] = #100000 1'b1;
end 
// expected MIR[ 27 ]
initial
begin
	MIR_expected[27] = 1'b0;
	MIR_expected[27] = #610648 1'b1;
	MIR_expected[27] = #200000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #400000 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[27] = 1'b0;
		MIR_expected[27] = #100000 1'b1;
		MIR_expected[27] = #100000 1'b0;
		MIR_expected[27] = #300000 1'b1;
		# 100000;
	end
	MIR_expected[27] = 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #200000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #600000 1'b1;
	MIR_expected[27] = #100000 1'b0;
end 
// expected MIR[ 26 ]
initial
begin
	MIR_expected[26] = 1'b0;
	MIR_expected[26] = #110161 1'b1;
	MIR_expected[26] = #100000 1'b0;
	# 100000;
	repeat(2)
	begin
		MIR_expected[26] = 1'b1;
		MIR_expected[26] = #100000 1'b0;
		# 700000;
	end
	repeat(2)
	begin
		MIR_expected[26] = 1'b1;
		MIR_expected[26] = #100000 1'b0;
		# 500000;
	end
	MIR_expected[26] = 1'b1;
	MIR_expected[26] = #100000 1'b0;
	MIR_expected[26] = #300000 1'b1;
	MIR_expected[26] = #100000 1'b0;
	MIR_expected[26] = #200000 1'b1;
	MIR_expected[26] = #100000 1'b0;
	# 300000;
	repeat(3)
	begin
		MIR_expected[26] = 1'b1;
		MIR_expected[26] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[26] = 1'b1;
	MIR_expected[26] = #100000 1'b0;
end 
// expected MIR[ 25 ]
initial
begin
	MIR_expected[25] = 1'b0;
end 
// expected MIR[ 24 ]
initial
begin
	MIR_expected[24] = 1'b0;
end 
// expected MIR[ 23 ]
initial
begin
	MIR_expected[23] = 1'b0;
	MIR_expected[23] = #510164 1'b1;
	MIR_expected[23] = #100000 1'b0;
	MIR_expected[23] = #700000 1'b1;
	MIR_expected[23] = #100000 1'b0;
end 
// expected MIR[ 22 ]
initial
begin
	MIR_expected[22] = 1'b0;
end 
// expected MIR[ 21 ]
initial
begin
	MIR_expected[21] = 1'b0;
	MIR_expected[21] = #110627 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #100000 1'b1;
		MIR_expected[21] = #200000 1'b0;
		MIR_expected[21] = #200000 1'b1;
		# 300000;
	end
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #100000 1'b1;
		MIR_expected[21] = #100000 1'b0;
		MIR_expected[21] = #100000 1'b1;
		# 300000;
	end
	MIR_expected[21] = 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	# 300000;
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #100000 1'b1;
		# 200000;
	end
	repeat(3)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[21] = 1'b0;
end 
// expected MIR[ 20 ]
initial
begin
	MIR_expected[20] = 1'b0;
	MIR_expected[20] = #110160 1'b1;
	MIR_expected[20] = #100000 1'b0;
	MIR_expected[20] = #100000 1'b1;
	# 4000000;
	repeat(3)
	begin
		MIR_expected[20] = 1'b0;
		MIR_expected[20] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[20] = 1'b0;
end 
// expected MIR[ 19 ]
initial
begin
	MIR_expected[19] = 1'b0;
	MIR_expected[19] = #609778 1'b1;
	MIR_expected[19] = #200000 1'b0;
	MIR_expected[19] = #600000 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[19] = 1'b0;
		MIR_expected[19] = #500000 1'b1;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[19] = 1'b0;
		MIR_expected[19] = #600000 1'b1;
		# 100000;
	end
	MIR_expected[19] = 1'b0;
end 
// expected MIR[ 18 ]
initial
begin
	MIR_expected[18] = 1'b0;
	MIR_expected[18] = #109969 1'b1;
	MIR_expected[18] = #100000 1'b0;
	MIR_expected[18] = #100000 1'b1;
	# 4000000;
	repeat(3)
	begin
		MIR_expected[18] = 1'b0;
		MIR_expected[18] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[18] = 1'b0;
end 
// expected MIR[ 17 ]
initial
begin
	MIR_expected[17] = 1'b0;
	MIR_expected[17] = #3209674 1'b1;
	MIR_expected[17] = #100000 1'b0;
	MIR_expected[17] = #600000 1'b1;
	MIR_expected[17] = #100000 1'b0;
end 
// expected MIR[ 16 ]
initial
begin
	MIR_expected[16] = 1'b0;
	MIR_expected[16] = #110035 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[16] = 1'b0;
		MIR_expected[16] = #100000 1'b1;
		MIR_expected[16] = #200000 1'b0;
		MIR_expected[16] = #300000 1'b1;
		# 200000;
	end
	repeat(2)
	begin
		MIR_expected[16] = 1'b0;
		MIR_expected[16] = #100000 1'b1;
		MIR_expected[16] = #100000 1'b0;
		MIR_expected[16] = #200000 1'b1;
		# 200000;
	end
	MIR_expected[16] = 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #300000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	# 300000;
	repeat(3)
	begin
		MIR_expected[16] = 1'b1;
		MIR_expected[16] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[16] = 1'b1;
	MIR_expected[16] = #100000 1'b0;
end 
// expected MIR[ 15 ]
initial
begin
	MIR_expected[15] = 1'b0;
	MIR_expected[15] = #510169 1'b1;
	MIR_expected[15] = #200000 1'b0;
	MIR_expected[15] = #600000 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[15] = 1'b0;
		MIR_expected[15] = #500000 1'b1;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[15] = 1'b0;
		MIR_expected[15] = #600000 1'b1;
		# 100000;
	end
	MIR_expected[15] = 1'b0;
end 
// expected MIR[ 14 ]
initial
begin
	MIR_expected[14] = 1'b0;
end 
// expected MIR[ 13 ]
initial
begin
	MIR_expected[13] = 1'b0;
	MIR_expected[13] = #1010340 1'b1;
	MIR_expected[13] = #100000 1'b0;
	# 700000;
	repeat(2)
	begin
		MIR_expected[13] = 1'b1;
		MIR_expected[13] = #100000 1'b0;
		# 500000;
	end
	MIR_expected[13] = 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #300000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #600000 1'b1;
	MIR_expected[13] = #100000 1'b0;
end 
// expected MIR[ 12 ]
initial
begin
	MIR_expected[12] = 1'b0;
end 
// expected MIR[ 11 ]
initial
begin
	MIR_expected[11] = 1'b0;
end 
// expected MIR[ 10 ]
initial
begin
	MIR_expected[10] = 1'b0;
	MIR_expected[10] = #809956 1'b1;
	MIR_expected[10] = #100000 1'b0;
	# 700000;
	repeat(2)
	begin
		MIR_expected[10] = 1'b1;
		MIR_expected[10] = #100000 1'b0;
		# 500000;
	end
	repeat(2)
	begin
		MIR_expected[10] = 1'b1;
		MIR_expected[10] = #100000 1'b0;
		# 300000;
	end
	MIR_expected[10] = 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #200000 1'b1;
	MIR_expected[10] = #100000 1'b0;
end 
// expected MIR[ 9 ]
initial
begin
	MIR_expected[9] = 1'b0;
	# 110271;
	repeat(2)
	begin
		MIR_expected[9] = 1'b1;
		MIR_expected[9] = #100000 1'b0;
		MIR_expected[9] = #100000 1'b1;
		MIR_expected[9] = #200000 1'b0;
		# 400000;
	end
	repeat(3)
	begin
		MIR_expected[9] = 1'b1;
		MIR_expected[9] = #100000 1'b0;
		MIR_expected[9] = #100000 1'b1;
		MIR_expected[9] = #100000 1'b0;
		# 300000;
	end
	MIR_expected[9] = 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #200000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	# 300000;
	repeat(3)
	begin
		MIR_expected[9] = 1'b1;
		MIR_expected[9] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[9] = 1'b1;
	MIR_expected[9] = #100000 1'b0;
end 
// expected MIR[ 8 ]
initial
begin
	MIR_expected[8] = 1'b0;
	MIR_expected[8] = #3410222 1'b1;
	MIR_expected[8] = #100000 1'b0;
	MIR_expected[8] = #200000 1'b1;
	MIR_expected[8] = #100000 1'b0;
	MIR_expected[8] = #300000 1'b1;
	MIR_expected[8] = #100000 1'b0;
end 
// expected MIR[ 7 ]
initial
begin
	MIR_expected[7] = 1'b0;
	MIR_expected[7] = #709984 1'b1;
	MIR_expected[7] = #200000 1'b0;
	# 600000;
	repeat(2)
	begin
		MIR_expected[7] = 1'b1;
		MIR_expected[7] = #200000 1'b0;
		# 400000;
	end
	MIR_expected[7] = 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[7] = 1'b0;
		MIR_expected[7] = #300000 1'b1;
		# 100000;
	end
	MIR_expected[7] = 1'b0;
	MIR_expected[7] = #200000 1'b1;
	MIR_expected[7] = #100000 1'b0;
end 
// expected MIR[ 6 ]
initial
begin
	MIR_expected[6] = 1'b0;
	MIR_expected[6] = #910189 1'b1;
	MIR_expected[6] = #100000 1'b0;
	# 700000;
	repeat(2)
	begin
		MIR_expected[6] = 1'b1;
		MIR_expected[6] = #100000 1'b0;
		# 500000;
	end
	MIR_expected[6] = 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #400000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #200000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #300000 1'b1;
	MIR_expected[6] = #100000 1'b0;
end 
// expected MIR[ 5 ]
initial
begin
	MIR_expected[5] = 1'b0;
	MIR_expected[5] = #710639 1'b1;
	MIR_expected[5] = #100000 1'b0;
	# 700000;
	repeat(2)
	begin
		MIR_expected[5] = 1'b1;
		MIR_expected[5] = #100000 1'b0;
		# 500000;
	end
	MIR_expected[5] = 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #400000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #600000 1'b1;
	MIR_expected[5] = #100000 1'b0;
end 
// expected MIR[ 4 ]
initial
begin
	MIR_expected[4] = 1'b0;
	# 110390;
	repeat(2)
	begin
		MIR_expected[4] = 1'b1;
		MIR_expected[4] = #100000 1'b0;
		MIR_expected[4] = #100000 1'b1;
		MIR_expected[4] = #200000 1'b0;
		# 400000;
	end
	repeat(3)
	begin
		MIR_expected[4] = 1'b1;
		MIR_expected[4] = #100000 1'b0;
		MIR_expected[4] = #100000 1'b1;
		MIR_expected[4] = #100000 1'b0;
		# 300000;
	end
	MIR_expected[4] = 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #200000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	# 300000;
	repeat(3)
	begin
		MIR_expected[4] = 1'b1;
		MIR_expected[4] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[4] = 1'b1;
	MIR_expected[4] = #100000 1'b0;
end 
// expected MIR[ 3 ]
initial
begin
	MIR_expected[3] = 1'b0;
end 
// expected MIR[ 2 ]
initial
begin
	MIR_expected[2] = 1'b0;
	MIR_expected[2] = #709582 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #600000 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[2] = 1'b0;
		MIR_expected[2] = #300000 1'b1;
		MIR_expected[2] = #100000 1'b0;
		MIR_expected[2] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[2] = 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #200000 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #100000 1'b1;
	MIR_expected[2] = #200000 1'b0;
end 
// expected MIR[ 1 ]
initial
begin
	MIR_expected[1] = 1'b0;
	# 509970;
	repeat(2)
	begin
		MIR_expected[1] = 1'b1;
		MIR_expected[1] = #300000 1'b0;
		# 500000;
	end
	repeat(2)
	begin
		MIR_expected[1] = 1'b1;
		MIR_expected[1] = #100000 1'b0;
		# 500000;
	end
	MIR_expected[1] = 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #300000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #200000 1'b1;
	MIR_expected[1] = #100000 1'b0;
end 
// expected MIR[ 0 ]
initial
begin
	MIR_expected[0] = 1'b0;
	# 109857;
	repeat(2)
	begin
		MIR_expected[0] = 1'b1;
		MIR_expected[0] = #100000 1'b0;
		MIR_expected[0] = #100000 1'b1;
		MIR_expected[0] = #400000 1'b0;
		# 200000;
	end
	repeat(2)
	begin
		MIR_expected[0] = 1'b1;
		MIR_expected[0] = #100000 1'b0;
		MIR_expected[0] = #100000 1'b1;
		MIR_expected[0] = #300000 1'b0;
		# 100000;
	end
	repeat(4)
	begin
		MIR_expected[0] = 1'b1;
		MIR_expected[0] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[0] = 1'b1;
	# 200000;
	repeat(5)
	begin
		MIR_expected[0] = 1'b0;
		MIR_expected[0] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[0] = 1'b0;
end 
// expected MPC[ 8 ]
initial
begin
	MPC_expected[8] = 1'b0;
end 
// expected MPC[ 7 ]
initial
begin
	MPC_expected[7] = 1'b0;
end 
// expected MPC[ 6 ]
initial
begin
	MPC_expected[6] = 1'b0;
	MPC_expected[6] = #3187848 1'b1;
	MPC_expected[6] = #223290 1'b0;
	MPC_expected[6] = #100474 1'b1;
	MPC_expected[6] = #199526 1'b0;
	MPC_expected[6] = #100474 1'b1;
	MPC_expected[6] = #299526 1'b0;
end 
// expected MPC[ 5 ]
initial
begin
	MPC_expected[5] = 1'b0;
	MPC_expected[5] = #3187465 1'b1;
	MPC_expected[5] = #223284 1'b0;
	MPC_expected[5] = #400478 1'b1;
	MPC_expected[5] = #299522 1'b0;
end 
// expected MPC[ 4 ]
initial
begin
	MPC_expected[4] = 1'b0;
	# 387474;
	repeat(2)
	begin
		MPC_expected[4] = 1'b1;
		MPC_expected[4] = #623283 1'b0;
		# 176717;
	end
	MPC_expected[4] = 1'b1;
	MPC_expected[4] = #423283 1'b0;
	MPC_expected[4] = #176717 1'b1;
	MPC_expected[4] = #423283 1'b0;
	MPC_expected[4] = #500484 1'b1;
	MPC_expected[4] = #199516 1'b0;
end 
// expected MPC[ 3 ]
initial
begin
	MPC_expected[3] = 1'b0;
	MPC_expected[3] = #511084 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #100000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #300000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	# 100000;
	repeat(2)
	begin
		MPC_expected[3] = 1'b1;
		MPC_expected[3] = #200000 1'b0;
		# 400000;
	end
	MPC_expected[3] = 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #500710 1'b1;
	MPC_expected[3] = #199290 1'b0;
end 
// expected MPC[ 2 ]
initial
begin
	MPC_expected[2] = 1'b0;
	MPC_expected[2] = #411950 1'b1;
	MPC_expected[2] = #100000 1'b0;
	MPC_expected[2] = #200000 1'b1;
	MPC_expected[2] = #100000 1'b0;
	MPC_expected[2] = #400000 1'b1;
	MPC_expected[2] = #100000 1'b0;
	MPC_expected[2] = #200000 1'b1;
	# 100000;
	repeat(2)
	begin
		MPC_expected[2] = 1'b0;
		MPC_expected[2] = #376359 1'b1;
		# 223641;
	end
	MPC_expected[2] = 1'b0;
end 
// expected MPC[ 1 ]
initial
begin
	MPC_expected[1] = 1'b1;
	MPC_expected[1] = #111392 1'b0;
	# 100000;
	repeat(2)
	begin
		MPC_expected[1] = 1'b1;
		MPC_expected[1] = #100000 1'b0;
		MPC_expected[1] = #76368 1'b1;
		MPC_expected[1] = #23767 1'b0;
		MPC_expected[1] = #99865 1'b1;
		MPC_expected[1] = #300000 1'b0;
		# 200000;
	end
	repeat(2)
	begin
		MPC_expected[1] = 1'b1;
		MPC_expected[1] = #100000 1'b0;
		MPC_expected[1] = #100000 1'b1;
		MPC_expected[1] = #200000 1'b0;
		# 200000;
	end
	MPC_expected[1] = 1'b1;
	MPC_expected[1] = #176368 1'b0;
	MPC_expected[1] = #123632 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	# 200000;
	repeat(3)
	begin
		MPC_expected[1] = 1'b0;
		MPC_expected[1] = #100000 1'b1;
		# 100000;
	end
	MPC_expected[1] = 1'b0;
	MPC_expected[1] = #100000 1'b1;
end 
// expected MPC[ 0 ]
initial
begin
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #387858 1'b1;
	MPC_expected[0] = #23763 1'b0;
	MPC_expected[0] = #200367 1'b1;
	MPC_expected[0] = #200000 1'b0;
	MPC_expected[0] = #100000 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #175870 1'b1;
	MPC_expected[0] = #23763 1'b0;
	MPC_expected[0] = #200367 1'b1;
	# 200000;
	repeat(2)
	begin
		MPC_expected[0] = 1'b0;
		MPC_expected[0] = #100000 1'b1;
		MPC_expected[0] = #100000 1'b0;
		MPC_expected[0] = #99633 1'b1;
		MPC_expected[0] = #100000 1'b0;
		MPC_expected[0] = #100367 1'b1;
		# 100000;
	end
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #100000 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #200000 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #199633 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #300367 1'b1;
	MPC_expected[0] = #100000 1'b0;
end 
// expected C_BUS[ 31 ]
initial
begin
	C_BUS_expected[31] = 1'b0;
	C_BUS_expected[31] = #213613 1'b1;
	C_BUS_expected[31] = #267 1'b0;
	C_BUS_expected[31] = #3000196 1'b1;
	C_BUS_expected[31] = #11775 1'b0;
	C_BUS_expected[31] = #88029 1'b1;
	C_BUS_expected[31] = #1327 1'b0;
	C_BUS_expected[31] = #598869 1'b1;
	C_BUS_expected[31] = #11775 1'b0;
	C_BUS_expected[31] = #88029 1'b1;
	C_BUS_expected[31] = #1327 1'b0;
	# 298406;
	repeat(3)
	begin
		C_BUS_expected[31] = 1'b1;
		C_BUS_expected[31] = #267 1'b0;
		# 199733;
	end
	C_BUS_expected[31] = 1'b1;
	C_BUS_expected[31] = #267 1'b0;
end 
// expected C_BUS[ 30 ]
initial
begin
	C_BUS_expected[30] = 1'b0;
	C_BUS_expected[30] = #3214604 1'b1;
	C_BUS_expected[30] = #11607 1'b0;
	C_BUS_expected[30] = #88393 1'b1;
	C_BUS_expected[30] = #695 1'b0;
	C_BUS_expected[30] = #599305 1'b1;
	C_BUS_expected[30] = #11607 1'b0;
	C_BUS_expected[30] = #88393 1'b1;
	C_BUS_expected[30] = #695 1'b0;
end 
// expected C_BUS[ 29 ]
initial
begin
	C_BUS_expected[29] = 1'b0;
	C_BUS_expected[29] = #3214038 1'b1;
	C_BUS_expected[29] = #10969 1'b0;
	C_BUS_expected[29] = #89294 1'b1;
	C_BUS_expected[29] = #1230 1'b0;
	C_BUS_expected[29] = #598507 1'b1;
	C_BUS_expected[29] = #10969 1'b0;
	C_BUS_expected[29] = #89294 1'b1;
	C_BUS_expected[29] = #1230 1'b0;
	C_BUS_expected[29] = #179653 1'b1;
	C_BUS_expected[29] = #20419 1'b0;
end 
// expected C_BUS[ 28 ]
initial
begin
	C_BUS_expected[28] = 1'b0;
	C_BUS_expected[28] = #214609 1'b1;
	C_BUS_expected[28] = #285 1'b0;
	C_BUS_expected[28] = #2999240 1'b1;
	C_BUS_expected[28] = #10466 1'b0;
	C_BUS_expected[28] = #89534 1'b1;
	C_BUS_expected[28] = #338 1'b0;
	C_BUS_expected[28] = #100334 1'b1;
	C_BUS_expected[28] = #958 1'b0;
	C_BUS_expected[28] = #79999 1'b1;
	C_BUS_expected[28] = #19043 1'b0;
	C_BUS_expected[28] = #399328 1'b1;
	C_BUS_expected[28] = #10466 1'b0;
	C_BUS_expected[28] = #89534 1'b1;
	C_BUS_expected[28] = #338 1'b0;
	C_BUS_expected[28] = #100334 1'b1;
	C_BUS_expected[28] = #81031 1'b0;
	C_BUS_expected[28] = #18969 1'b1;
	# 1584;
	repeat(3)
	begin
		C_BUS_expected[28] = 1'b0;
		C_BUS_expected[28] = #98219 1'b1;
		C_BUS_expected[28] = #285 1'b0;
		C_BUS_expected[28] = #100043 1'b1;
		# 1453;
	end
	C_BUS_expected[28] = 1'b0;
	C_BUS_expected[28] = #98219 1'b1;
	C_BUS_expected[28] = #285 1'b0;
end 
// expected C_BUS[ 27 ]
initial
begin
	C_BUS_expected[27] = 1'b0;
	C_BUS_expected[27] = #1715736 1'b1;
	C_BUS_expected[27] = #256 1'b0;
	C_BUS_expected[27] = #99958 1'b1;
	C_BUS_expected[27] = #97630 1'b0;
	C_BUS_expected[27] = #379 1'b1;
	C_BUS_expected[27] = #2033 1'b0;
	C_BUS_expected[27] = #999744 1'b1;
	C_BUS_expected[27] = #256 1'b0;
	C_BUS_expected[27] = #99958 1'b1;
	C_BUS_expected[27] = #97630 1'b0;
	C_BUS_expected[27] = #379 1'b1;
	C_BUS_expected[27] = #2033 1'b0;
	C_BUS_expected[27] = #97937 1'b1;
	C_BUS_expected[27] = #10419 1'b0;
	C_BUS_expected[27] = #89232 1'b1;
	C_BUS_expected[27] = #725 1'b0;
	C_BUS_expected[27] = #1198 1'b1;
	C_BUS_expected[27] = #98077 1'b0;
	C_BUS_expected[27] = #1919 1'b1;
	C_BUS_expected[27] = #79999 1'b0;
	C_BUS_expected[27] = #18252 1'b1;
	C_BUS_expected[27] = #2242 1'b0;
	C_BUS_expected[27] = #199511 1'b1;
	C_BUS_expected[27] = #98077 1'b0;
	C_BUS_expected[27] = #379 1'b1;
	C_BUS_expected[27] = #1540 1'b0;
	C_BUS_expected[27] = #98430 1'b1;
	C_BUS_expected[27] = #10419 1'b0;
	C_BUS_expected[27] = #89232 1'b1;
	C_BUS_expected[27] = #725 1'b0;
	C_BUS_expected[27] = #1198 1'b1;
	C_BUS_expected[27] = #98077 1'b0;
	C_BUS_expected[27] = #2412 1'b1;
	C_BUS_expected[27] = #79378 1'b0;
	C_BUS_expected[27] = #18380 1'b1;
	# 2242;
	repeat(3)
	begin
		C_BUS_expected[27] = 1'b0;
		C_BUS_expected[27] = #198236 1'b1;
		# 1764;
	end
	C_BUS_expected[27] = 1'b0;
end 
// expected C_BUS[ 26 ]
initial
begin
	C_BUS_expected[26] = 1'b0;
	C_BUS_expected[26] = #1016267 1'b1;
	C_BUS_expected[26] = #97477 1'b0;
	C_BUS_expected[26] = #365 1'b1;
	C_BUS_expected[26] = #2452 1'b0;
	C_BUS_expected[26] = #1299706 1'b1;
	C_BUS_expected[26] = #97477 1'b0;
	C_BUS_expected[26] = #365 1'b1;
	C_BUS_expected[26] = #2452 1'b0;
	C_BUS_expected[26] = #697674 1'b1;
	C_BUS_expected[26] = #9083 1'b0;
	C_BUS_expected[26] = #90426 1'b1;
	C_BUS_expected[26] = #413 1'b0;
	C_BUS_expected[26] = #102404 1'b1;
	C_BUS_expected[26] = #100000 1'b0;
	C_BUS_expected[26] = #199780 1'b1;
	C_BUS_expected[26] = #97403 1'b0;
	C_BUS_expected[26] = #365 1'b1;
	C_BUS_expected[26] = #2480 1'b0;
	C_BUS_expected[26] = #97646 1'b1;
	C_BUS_expected[26] = #9083 1'b0;
	C_BUS_expected[26] = #90426 1'b1;
	C_BUS_expected[26] = #413 1'b0;
	C_BUS_expected[26] = #2184 1'b1;
	C_BUS_expected[26] = #97403 1'b0;
	C_BUS_expected[26] = #365 1'b1;
	C_BUS_expected[26] = #235 1'b0;
	C_BUS_expected[26] = #81231 1'b1;
	C_BUS_expected[26] = #18769 1'b0;
end 
// expected C_BUS[ 25 ]
initial
begin
	C_BUS_expected[25] = 1'b0;
	C_BUS_expected[25] = #3214574 1'b1;
	C_BUS_expected[25] = #8652 1'b0;
	C_BUS_expected[25] = #90354 1'b1;
	C_BUS_expected[25] = #946 1'b0;
	C_BUS_expected[25] = #600048 1'b1;
	C_BUS_expected[25] = #8652 1'b0;
	C_BUS_expected[25] = #90354 1'b1;
	C_BUS_expected[25] = #946 1'b0;
end 
// expected C_BUS[ 24 ]
initial
begin
	C_BUS_expected[24] = 1'b0;
	C_BUS_expected[24] = #3214356 1'b1;
	C_BUS_expected[24] = #8369 1'b0;
	C_BUS_expected[24] = #91744 1'b1;
	C_BUS_expected[24] = #601 1'b0;
	C_BUS_expected[24] = #599286 1'b1;
	C_BUS_expected[24] = #8369 1'b0;
	C_BUS_expected[24] = #91744 1'b1;
	C_BUS_expected[24] = #601 1'b0;
end 
// expected C_BUS[ 23 ]
initial
begin
	C_BUS_expected[23] = 1'b0;
	C_BUS_expected[23] = #3213478 1'b1;
	C_BUS_expected[23] = #9160 1'b0;
	C_BUS_expected[23] = #90840 1'b1;
	C_BUS_expected[23] = #948 1'b0;
	C_BUS_expected[23] = #599052 1'b1;
	C_BUS_expected[23] = #9160 1'b0;
	C_BUS_expected[23] = #90840 1'b1;
	C_BUS_expected[23] = #948 1'b0;
end 
// expected C_BUS[ 22 ]
initial
begin
	C_BUS_expected[22] = 1'b0;
	C_BUS_expected[22] = #213819 1'b1;
	C_BUS_expected[22] = #284 1'b0;
	C_BUS_expected[22] = #3000166 1'b1;
	C_BUS_expected[22] = #8001 1'b0;
	C_BUS_expected[22] = #91833 1'b1;
	C_BUS_expected[22] = #483 1'b0;
	C_BUS_expected[22] = #599683 1'b1;
	C_BUS_expected[22] = #8001 1'b0;
	C_BUS_expected[22] = #91833 1'b1;
	C_BUS_expected[22] = #483 1'b0;
	# 299233;
	repeat(3)
	begin
		C_BUS_expected[22] = 1'b1;
		C_BUS_expected[22] = #284 1'b0;
		# 199716;
	end
	C_BUS_expected[22] = 1'b1;
	C_BUS_expected[22] = #284 1'b0;
end 
// expected C_BUS[ 21 ]
initial
begin
	C_BUS_expected[21] = 1'b0;
	C_BUS_expected[21] = #113704 1'b1;
	C_BUS_expected[21] = #503 1'b0;
	C_BUS_expected[21] = #199497 1'b1;
	C_BUS_expected[21] = #503 1'b0;
	C_BUS_expected[21] = #2899758 1'b1;
	C_BUS_expected[21] = #7641 1'b0;
	C_BUS_expected[21] = #92359 1'b1;
	C_BUS_expected[21] = #830 1'b0;
	C_BUS_expected[21] = #599170 1'b1;
	C_BUS_expected[21] = #7641 1'b0;
	C_BUS_expected[21] = #92359 1'b1;
	C_BUS_expected[21] = #830 1'b0;
	C_BUS_expected[21] = #180623 1'b1;
	C_BUS_expected[21] = #311 1'b0;
	# 217975;
	repeat(2)
	begin
		C_BUS_expected[21] = 1'b1;
		C_BUS_expected[21] = #503 1'b0;
		# 199497;
	end
	C_BUS_expected[21] = 1'b1;
	C_BUS_expected[21] = #503 1'b0;
end 
// expected C_BUS[ 20 ]
initial
begin
	C_BUS_expected[20] = 1'b0;
	C_BUS_expected[20] = #113623 1'b1;
	C_BUS_expected[20] = #321 1'b0;
	C_BUS_expected[20] = #199679 1'b1;
	C_BUS_expected[20] = #321 1'b0;
	C_BUS_expected[20] = #2899792 1'b1;
	C_BUS_expected[20] = #7178 1'b0;
	C_BUS_expected[20] = #92709 1'b1;
	C_BUS_expected[20] = #601 1'b0;
	C_BUS_expected[20] = #180813 1'b1;
	C_BUS_expected[20] = #19627 1'b0;
	C_BUS_expected[20] = #399072 1'b1;
	C_BUS_expected[20] = #7178 1'b0;
	C_BUS_expected[20] = #92709 1'b1;
	C_BUS_expected[20] = #601 1'b0;
	C_BUS_expected[20] = #100672 1'b1;
	C_BUS_expected[20] = #80141 1'b0;
	C_BUS_expected[20] = #678 1'b1;
	# 21020;
	repeat(3)
	begin
		C_BUS_expected[20] = 1'b0;
		C_BUS_expected[20] = #196888 1'b1;
		C_BUS_expected[20] = #321 1'b0;
		C_BUS_expected[20] = #1109 1'b1;
		# 1682;
	end
	C_BUS_expected[20] = 1'b0;
end 
// expected C_BUS[ 19 ]
initial
begin
	C_BUS_expected[19] = 1'b0;
	C_BUS_expected[19] = #113661 1'b1;
	C_BUS_expected[19] = #610 1'b0;
	C_BUS_expected[19] = #199390 1'b1;
	C_BUS_expected[19] = #610 1'b0;
	C_BUS_expected[19] = #2899640 1'b1;
	C_BUS_expected[19] = #6998 1'b0;
	C_BUS_expected[19] = #92752 1'b1;
	C_BUS_expected[19] = #1416 1'b0;
	C_BUS_expected[19] = #99820 1'b1;
	C_BUS_expected[19] = #80702 1'b0;
	C_BUS_expected[19] = #19060 1'b1;
	C_BUS_expected[19] = #1755 1'b0;
	C_BUS_expected[19] = #200930 1'b1;
	C_BUS_expected[19] = #99925 1'b0;
	C_BUS_expected[19] = #96642 1'b1;
	C_BUS_expected[19] = #6998 1'b0;
	C_BUS_expected[19] = #92752 1'b1;
	C_BUS_expected[19] = #1416 1'b0;
	C_BUS_expected[19] = #2267 1'b1;
	C_BUS_expected[19] = #96694 1'b0;
	C_BUS_expected[19] = #81561 1'b1;
	C_BUS_expected[19] = #18439 1'b0;
	# 199623;
	repeat(2)
	begin
		C_BUS_expected[19] = 1'b1;
		C_BUS_expected[19] = #610 1'b0;
		# 199390;
	end
	C_BUS_expected[19] = 1'b1;
	C_BUS_expected[19] = #610 1'b0;
end 
// expected C_BUS[ 18 ]
initial
begin
	C_BUS_expected[18] = 1'b0;
	C_BUS_expected[18] = #1816470 1'b1;
	C_BUS_expected[18] = #99639 1'b0;
	C_BUS_expected[18] = #1100361 1'b1;
	C_BUS_expected[18] = #99639 1'b0;
	C_BUS_expected[18] = #97631 1'b1;
	C_BUS_expected[18] = #6653 1'b0;
	C_BUS_expected[18] = #92920 1'b1;
	C_BUS_expected[18] = #844 1'b0;
	C_BUS_expected[18] = #2756 1'b1;
	C_BUS_expected[18] = #96609 1'b0;
	C_BUS_expected[18] = #1258 1'b1;
	C_BUS_expected[18] = #1726 1'b0;
	C_BUS_expected[18] = #97016 1'b1;
	C_BUS_expected[18] = #932 1'b0;
	C_BUS_expected[18] = #399286 1'b1;
	C_BUS_expected[18] = #6653 1'b0;
	C_BUS_expected[18] = #92920 1'b1;
	C_BUS_expected[18] = #844 1'b0;
	C_BUS_expected[18] = #100623 1'b1;
	C_BUS_expected[18] = #79812 1'b0;
	C_BUS_expected[18] = #703 1'b1;
	# 20814;
	repeat(3)
	begin
		C_BUS_expected[18] = 1'b0;
		C_BUS_expected[18] = #198559 1'b1;
		# 1441;
	end
	C_BUS_expected[18] = 1'b0;
end 
// expected C_BUS[ 17 ]
initial
begin
	C_BUS_expected[17] = 1'b0;
	C_BUS_expected[17] = #1015249 1'b1;
	C_BUS_expected[17] = #98348 1'b0;
	C_BUS_expected[17] = #533 1'b1;
	C_BUS_expected[17] = #1501 1'b0;
	# 699618;
	repeat(2)
	begin
		C_BUS_expected[17] = 1'b1;
		C_BUS_expected[17] = #98348 1'b0;
		C_BUS_expected[17] = #533 1'b1;
		C_BUS_expected[17] = #1501 1'b0;
		# 499618;
	end
	C_BUS_expected[17] = 1'b1;
	C_BUS_expected[17] = #98348 1'b0;
	C_BUS_expected[17] = #533 1'b1;
	C_BUS_expected[17] = #1501 1'b0;
	C_BUS_expected[17] = #98024 1'b1;
	C_BUS_expected[17] = #6638 1'b0;
	C_BUS_expected[17] = #93304 1'b1;
	C_BUS_expected[17] = #533 1'b0;
	C_BUS_expected[17] = #1832 1'b1;
	C_BUS_expected[17] = #97635 1'b0;
	C_BUS_expected[17] = #1484 1'b1;
	C_BUS_expected[17] = #79821 1'b0;
	C_BUS_expected[17] = #18809 1'b1;
	C_BUS_expected[17] = #1920 1'b0;
	C_BUS_expected[17] = #200331 1'b1;
	C_BUS_expected[17] = #97635 1'b0;
	C_BUS_expected[17] = #533 1'b1;
	C_BUS_expected[17] = #2168 1'b0;
	C_BUS_expected[17] = #97357 1'b1;
	C_BUS_expected[17] = #6638 1'b0;
	C_BUS_expected[17] = #93304 1'b1;
	C_BUS_expected[17] = #533 1'b0;
	C_BUS_expected[17] = #1832 1'b1;
	C_BUS_expected[17] = #97635 1'b0;
	C_BUS_expected[17] = #81254 1'b1;
	C_BUS_expected[17] = #18860 1'b0;
end 
// expected C_BUS[ 16 ]
initial
begin
	C_BUS_expected[16] = 1'b0;
	C_BUS_expected[16] = #212931 1'b1;
	C_BUS_expected[16] = #286 1'b0;
	C_BUS_expected[16] = #801584 1'b1;
	C_BUS_expected[16] = #100229 1'b0;
	C_BUS_expected[16] = #400513 1'b1;
	C_BUS_expected[16] = #174 1'b0;
	# 299084;
	repeat(2)
	begin
		C_BUS_expected[16] = 1'b1;
		C_BUS_expected[16] = #100229 1'b0;
		# 499771;
	end
	C_BUS_expected[16] = 1'b1;
	C_BUS_expected[16] = #100229 1'b0;
	C_BUS_expected[16] = #98582 1'b1;
	C_BUS_expected[16] = #5513 1'b0;
	C_BUS_expected[16] = #94092 1'b1;
	C_BUS_expected[16] = #902 1'b0;
	C_BUS_expected[16] = #1369 1'b1;
	C_BUS_expected[16] = #97941 1'b0;
	C_BUS_expected[16] = #81018 1'b1;
	C_BUS_expected[16] = #18982 1'b0;
	C_BUS_expected[16] = #400183 1'b1;
	C_BUS_expected[16] = #5513 1'b0;
	C_BUS_expected[16] = #94092 1'b1;
	C_BUS_expected[16] = #902 1'b0;
	# 298812;
	repeat(3)
	begin
		C_BUS_expected[16] = 1'b1;
		C_BUS_expected[16] = #286 1'b0;
		# 199714;
	end
	C_BUS_expected[16] = 1'b1;
	C_BUS_expected[16] = #286 1'b0;
end 
// expected C_BUS[ 15 ]
initial
begin
	C_BUS_expected[15] = 1'b0;
	C_BUS_expected[15] = #213560 1'b1;
	C_BUS_expected[15] = #270 1'b0;
	C_BUS_expected[15] = #2999618 1'b1;
	C_BUS_expected[15] = #5391 1'b0;
	C_BUS_expected[15] = #694609 1'b1;
	C_BUS_expected[15] = #5391 1'b0;
	# 394721;
	repeat(3)
	begin
		C_BUS_expected[15] = 1'b1;
		C_BUS_expected[15] = #270 1'b0;
		# 199730;
	end
	C_BUS_expected[15] = 1'b1;
	C_BUS_expected[15] = #270 1'b0;
end 
// expected C_BUS[ 14 ]
initial
begin
	C_BUS_expected[14] = 1'b0;
	C_BUS_expected[14] = #113719 1'b1;
	C_BUS_expected[14] = #735 1'b0;
	C_BUS_expected[14] = #199265 1'b1;
	C_BUS_expected[14] = #735 1'b0;
	C_BUS_expected[14] = #2899606 1'b1;
	C_BUS_expected[14] = #5376 1'b0;
	C_BUS_expected[14] = #94283 1'b1;
	C_BUS_expected[14] = #1105 1'b0;
	C_BUS_expected[14] = #599236 1'b1;
	C_BUS_expected[14] = #5376 1'b0;
	C_BUS_expected[14] = #94283 1'b1;
	C_BUS_expected[14] = #1105 1'b0;
	# 398895;
	repeat(2)
	begin
		C_BUS_expected[14] = 1'b1;
		C_BUS_expected[14] = #735 1'b0;
		# 199265;
	end
	C_BUS_expected[14] = 1'b1;
	C_BUS_expected[14] = #735 1'b0;
end 
// expected C_BUS[ 13 ]
initial
begin
	C_BUS_expected[13] = 1'b0;
	C_BUS_expected[13] = #3212622 1'b1;
	C_BUS_expected[13] = #5560 1'b0;
	C_BUS_expected[13] = #94440 1'b1;
	C_BUS_expected[13] = #988 1'b0;
	C_BUS_expected[13] = #599012 1'b1;
	C_BUS_expected[13] = #5560 1'b0;
	C_BUS_expected[13] = #94440 1'b1;
	C_BUS_expected[13] = #988 1'b0;
	C_BUS_expected[13] = #181380 1'b1;
	C_BUS_expected[13] = #426 1'b0;
end 
// expected C_BUS[ 12 ]
initial
begin
	C_BUS_expected[12] = 1'b0;
	C_BUS_expected[12] = #114202 1'b1;
	C_BUS_expected[12] = #292 1'b0;
	C_BUS_expected[12] = #199708 1'b1;
	C_BUS_expected[12] = #292 1'b0;
	C_BUS_expected[12] = #2899963 1'b1;
	C_BUS_expected[12] = #4053 1'b0;
	C_BUS_expected[12] = #95692 1'b1;
	C_BUS_expected[12] = #828 1'b0;
	C_BUS_expected[12] = #180714 1'b1;
	C_BUS_expected[12] = #1011 1'b0;
	C_BUS_expected[12] = #417702 1'b1;
	C_BUS_expected[12] = #4053 1'b0;
	C_BUS_expected[12] = #95692 1'b1;
	C_BUS_expected[12] = #828 1'b0;
	C_BUS_expected[12] = #100563 1'b1;
	C_BUS_expected[12] = #80151 1'b0;
	C_BUS_expected[12] = #500 1'b1;
	# 20836;
	repeat(3)
	begin
		C_BUS_expected[12] = 1'b0;
		C_BUS_expected[12] = #197122 1'b1;
		C_BUS_expected[12] = #292 1'b0;
		C_BUS_expected[12] = #1167 1'b1;
		# 1419;
	end
	C_BUS_expected[12] = 1'b0;
end 
// expected C_BUS[ 11 ]
initial
begin
	C_BUS_expected[11] = 1'b0;
	C_BUS_expected[11] = #113471 1'b1;
	C_BUS_expected[11] = #527 1'b0;
	C_BUS_expected[11] = #199473 1'b1;
	C_BUS_expected[11] = #527 1'b0;
	C_BUS_expected[11] = #2899782 1'b1;
	C_BUS_expected[11] = #4329 1'b0;
	C_BUS_expected[11] = #95362 1'b1;
	C_BUS_expected[11] = #1067 1'b0;
	C_BUS_expected[11] = #101030 1'b1;
	C_BUS_expected[11] = #79546 1'b0;
	C_BUS_expected[11] = #1775 1'b1;
	C_BUS_expected[11] = #18956 1'b0;
	C_BUS_expected[11] = #200052 1'b1;
	C_BUS_expected[11] = #97574 1'b0;
	C_BUS_expected[11] = #1067 1'b1;
	C_BUS_expected[11] = #1429 1'b0;
	C_BUS_expected[11] = #97813 1'b1;
	C_BUS_expected[11] = #4329 1'b0;
	C_BUS_expected[11] = #95362 1'b1;
	C_BUS_expected[11] = #1067 1'b0;
	C_BUS_expected[11] = #1359 1'b1;
	C_BUS_expected[11] = #97574 1'b0;
	C_BUS_expected[11] = #81643 1'b1;
	C_BUS_expected[11] = #18733 1'b0;
	# 199624;
	repeat(2)
	begin
		C_BUS_expected[11] = 1'b1;
		C_BUS_expected[11] = #527 1'b0;
		# 199473;
	end
	C_BUS_expected[11] = 1'b1;
	C_BUS_expected[11] = #527 1'b0;
end 
// expected C_BUS[ 10 ]
initial
begin
	C_BUS_expected[10] = 1'b0;
	C_BUS_expected[10] = #513275 1'b1;
	C_BUS_expected[10] = #1295 1'b0;
	C_BUS_expected[10] = #798705 1'b1;
	C_BUS_expected[10] = #4647 1'b0;
	C_BUS_expected[10] = #497848 1'b1;
	C_BUS_expected[10] = #97297 1'b0;
	C_BUS_expected[10] = #1748 1'b1;
	C_BUS_expected[10] = #505 1'b0;
	C_BUS_expected[10] = #1100450 1'b1;
	C_BUS_expected[10] = #97297 1'b0;
	C_BUS_expected[10] = #1748 1'b1;
	C_BUS_expected[10] = #505 1'b0;
	C_BUS_expected[10] = #97963 1'b1;
	C_BUS_expected[10] = #3459 1'b0;
	C_BUS_expected[10] = #96325 1'b1;
	C_BUS_expected[10] = #575 1'b0;
	C_BUS_expected[10] = #2346 1'b1;
	C_BUS_expected[10] = #97079 1'b0;
	C_BUS_expected[10] = #1549 1'b1;
	C_BUS_expected[10] = #876 1'b0;
	C_BUS_expected[10] = #80030 1'b1;
	C_BUS_expected[10] = #17583 1'b0;
	C_BUS_expected[10] = #400178 1'b1;
	C_BUS_expected[10] = #3459 1'b0;
	C_BUS_expected[10] = #96325 1'b1;
	C_BUS_expected[10] = #575 1'b0;
end 
// expected C_BUS[ 9 ]
initial
begin
	C_BUS_expected[9] = 1'b0;
	C_BUS_expected[9] = #513762 1'b1;
	C_BUS_expected[9] = #3441 1'b0;
	C_BUS_expected[9] = #197857 1'b1;
	C_BUS_expected[9] = #99911 1'b0;
	C_BUS_expected[9] = #99729 1'b1;
	C_BUS_expected[9] = #256 1'b0;
	C_BUS_expected[9] = #100871 1'b1;
	C_BUS_expected[9] = #99129 1'b0;
	C_BUS_expected[9] = #197429 1'b1;
	C_BUS_expected[9] = #4818 1'b0;
	C_BUS_expected[9] = #197997 1'b1;
	C_BUS_expected[9] = #99771 1'b0;
	# 99729;
	repeat(2)
	begin
		C_BUS_expected[9] = 1'b1;
		C_BUS_expected[9] = #256 1'b0;
		C_BUS_expected[9] = #100871 1'b1;
		C_BUS_expected[9] = #99129 1'b0;
		# 399744;
	end
	C_BUS_expected[9] = 1'b1;
	C_BUS_expected[9] = #256 1'b0;
	C_BUS_expected[9] = #100871 1'b1;
	C_BUS_expected[9] = #99129 1'b0;
	C_BUS_expected[9] = #98310 1'b1;
	C_BUS_expected[9] = #1896 1'b0;
	C_BUS_expected[9] = #97793 1'b1;
	C_BUS_expected[9] = #513 1'b0;
	C_BUS_expected[9] = #2777 1'b1;
	C_BUS_expected[9] = #97322 1'b0;
	C_BUS_expected[9] = #80629 1'b1;
	C_BUS_expected[9] = #19371 1'b0;
	C_BUS_expected[9] = #399699 1'b1;
	C_BUS_expected[9] = #1896 1'b0;
	C_BUS_expected[9] = #97793 1'b1;
	C_BUS_expected[9] = #513 1'b0;
end 
// expected C_BUS[ 8 ]
initial
begin
	C_BUS_expected[8] = 1'b0;
	C_BUS_expected[8] = #113502 1'b1;
	C_BUS_expected[8] = #72 1'b0;
	C_BUS_expected[8] = #199928 1'b1;
	C_BUS_expected[8] = #72 1'b0;
	C_BUS_expected[8] = #199375 1'b1;
	C_BUS_expected[8] = #3621 1'b0;
	C_BUS_expected[8] = #199449 1'b1;
	C_BUS_expected[8] = #99911 1'b0;
	C_BUS_expected[8] = #496342 1'b1;
	C_BUS_expected[8] = #677 1'b0;
	C_BUS_expected[8] = #80410 1'b1;
	C_BUS_expected[8] = #18913 1'b0;
	C_BUS_expected[8] = #103747 1'b1;
	C_BUS_expected[8] = #99911 1'b0;
	C_BUS_expected[8] = #1597267 1'b1;
	C_BUS_expected[8] = #2160 1'b0;
	C_BUS_expected[8] = #97840 1'b1;
	C_BUS_expected[8] = #653 1'b0;
	C_BUS_expected[8] = #599347 1'b1;
	C_BUS_expected[8] = #2160 1'b0;
	C_BUS_expected[8] = #97840 1'b1;
	C_BUS_expected[8] = #653 1'b0;
	# 399652;
	repeat(2)
	begin
		C_BUS_expected[8] = 1'b1;
		C_BUS_expected[8] = #72 1'b0;
		# 199928;
	end
	C_BUS_expected[8] = 1'b1;
	C_BUS_expected[8] = #72 1'b0;
end 
// expected C_BUS[ 7 ]
initial
begin
	C_BUS_expected[7] = 1'b0;
	C_BUS_expected[7] = #112547 1'b1;
	C_BUS_expected[7] = #696 1'b0;
	C_BUS_expected[7] = #199304 1'b1;
	C_BUS_expected[7] = #696 1'b0;
	C_BUS_expected[7] = #402280 1'b1;
	C_BUS_expected[7] = #99911 1'b0;
	C_BUS_expected[7] = #700089 1'b1;
	C_BUS_expected[7] = #99911 1'b0;
	C_BUS_expected[7] = #500437 1'b1;
	C_BUS_expected[7] = #955 1'b0;
	C_BUS_expected[7] = #599045 1'b1;
	C_BUS_expected[7] = #955 1'b0;
	C_BUS_expected[7] = #496518 1'b1;
	C_BUS_expected[7] = #1967 1'b0;
	C_BUS_expected[7] = #97236 1'b1;
	C_BUS_expected[7] = #1067 1'b0;
	C_BUS_expected[7] = #599730 1'b1;
	C_BUS_expected[7] = #1967 1'b0;
	C_BUS_expected[7] = #97236 1'b1;
	C_BUS_expected[7] = #1067 1'b0;
	# 398933;
	repeat(2)
	begin
		C_BUS_expected[7] = 1'b1;
		C_BUS_expected[7] = #696 1'b0;
		# 199304;
	end
	C_BUS_expected[7] = 1'b1;
	C_BUS_expected[7] = #696 1'b0;
end 
// expected C_BUS[ 6 ]
initial
begin
	C_BUS_expected[6] = 1'b0;
	C_BUS_expected[6] = #113252 1'b1;
	C_BUS_expected[6] = #866 1'b0;
	C_BUS_expected[6] = #199134 1'b1;
	C_BUS_expected[6] = #866 1'b0;
	C_BUS_expected[6] = #401766 1'b1;
	C_BUS_expected[6] = #200073 1'b0;
	C_BUS_expected[6] = #599927 1'b1;
	# 200073;
	repeat(2)
	begin
		C_BUS_expected[6] = 1'b0;
		C_BUS_expected[6] = #300306 1'b1;
		C_BUS_expected[6] = #97734 1'b0;
		C_BUS_expected[6] = #2007 1'b1;
		C_BUS_expected[6] = #97993 1'b0;
		C_BUS_expected[6] = #1896 1'b1;
		# 100064;
	end
	C_BUS_expected[6] = 1'b0;
	C_BUS_expected[6] = #297700 1'b1;
	C_BUS_expected[6] = #1090 1'b0;
	C_BUS_expected[6] = #994 1'b1;
	C_BUS_expected[6] = #100475 1'b0;
	C_BUS_expected[6] = #99520 1'b1;
	C_BUS_expected[6] = #320 1'b0;
	C_BUS_expected[6] = #199685 1'b1;
	C_BUS_expected[6] = #100475 1'b0;
	C_BUS_expected[6] = #99520 1'b1;
	C_BUS_expected[6] = #320 1'b0;
	C_BUS_expected[6] = #97601 1'b1;
	C_BUS_expected[6] = #1090 1'b0;
	C_BUS_expected[6] = #994 1'b1;
	C_BUS_expected[6] = #100475 1'b0;
	# 397036;
	repeat(2)
	begin
		C_BUS_expected[6] = 1'b1;
		C_BUS_expected[6] = #866 1'b0;
		# 199134;
	end
	C_BUS_expected[6] = 1'b1;
	C_BUS_expected[6] = #866 1'b0;
end 
// expected C_BUS[ 5 ]
initial
begin
	C_BUS_expected[5] = 1'b0;
	C_BUS_expected[5] = #112810 1'b1;
	C_BUS_expected[5] = #869 1'b0;
	C_BUS_expected[5] = #199131 1'b1;
	C_BUS_expected[5] = #869 1'b0;
	C_BUS_expected[5] = #402200 1'b1;
	C_BUS_expected[5] = #99911 1'b0;
	C_BUS_expected[5] = #700089 1'b1;
	C_BUS_expected[5] = #99911 1'b0;
	C_BUS_expected[5] = #1597475 1'b1;
	C_BUS_expected[5] = #1490 1'b0;
	C_BUS_expected[5] = #2638 1'b1;
	C_BUS_expected[5] = #305 1'b0;
	C_BUS_expected[5] = #95112 1'b1;
	C_BUS_expected[5] = #794 1'b0;
	C_BUS_expected[5] = #502221 1'b1;
	C_BUS_expected[5] = #320 1'b0;
	C_BUS_expected[5] = #97120 1'b1;
	C_BUS_expected[5] = #1490 1'b0;
	C_BUS_expected[5] = #2638 1'b1;
	C_BUS_expected[5] = #305 1'b0;
	C_BUS_expected[5] = #95112 1'b1;
	C_BUS_expected[5] = #794 1'b0;
	C_BUS_expected[5] = #399206 1'b1;
	C_BUS_expected[5] = #869 1'b0;
	C_BUS_expected[5] = #79849 1'b1;
	C_BUS_expected[5] = #983 1'b0;
	C_BUS_expected[5] = #118299 1'b1;
	C_BUS_expected[5] = #869 1'b0;
	C_BUS_expected[5] = #199131 1'b1;
	C_BUS_expected[5] = #869 1'b0;
end 
// expected C_BUS[ 4 ]
initial
begin
	C_BUS_expected[4] = 1'b0;
	C_BUS_expected[4] = #716633 1'b1;
	C_BUS_expected[4] = #99911 1'b0;
	C_BUS_expected[4] = #700089 1'b1;
	C_BUS_expected[4] = #99911 1'b0;
	C_BUS_expected[4] = #377188 1'b1;
	C_BUS_expected[4] = #1416 1'b0;
	C_BUS_expected[4] = #1200000 1'b1;
	C_BUS_expected[4] = #499 1'b0;
	C_BUS_expected[4] = #18049 1'b1;
	C_BUS_expected[4] = #280 1'b0;
	C_BUS_expected[4] = #2638 1'b1;
	C_BUS_expected[4] = #305 1'b0;
	C_BUS_expected[4] = #96549 1'b1;
	C_BUS_expected[4] = #698 1'b0;
	C_BUS_expected[4] = #101481 1'b1;
	C_BUS_expected[4] = #28 1'b0;
	C_BUS_expected[4] = #330 1'b1;
	C_BUS_expected[4] = #320 1'b0;
	C_BUS_expected[4] = #377 1'b1;
	C_BUS_expected[4] = #320 1'b0;
	C_BUS_expected[4] = #478625 1'b1;
	C_BUS_expected[4] = #345 1'b0;
	C_BUS_expected[4] = #17704 1'b1;
	C_BUS_expected[4] = #280 1'b0;
	C_BUS_expected[4] = #2638 1'b1;
	C_BUS_expected[4] = #305 1'b0;
	C_BUS_expected[4] = #96549 1'b1;
	C_BUS_expected[4] = #698 1'b0;
	C_BUS_expected[4] = #181906 1'b1;
	C_BUS_expected[4] = #19801 1'b0;
	C_BUS_expected[4] = #80119 1'b1;
	C_BUS_expected[4] = #17876 1'b0;
	C_BUS_expected[4] = #104488 1'b1;
	C_BUS_expected[4] = #75082 1'b0;
	C_BUS_expected[4] = #294 1'b1;
	# 20136;
	repeat(2)
	begin
		C_BUS_expected[4] = 1'b0;
		C_BUS_expected[4] = #103078 1'b1;
		# 96922;
	end
	C_BUS_expected[4] = 1'b0;
end 
// expected C_BUS[ 3 ]
initial
begin
	C_BUS_expected[3] = 1'b0;
	C_BUS_expected[3] = #112218 1'b1;
	C_BUS_expected[3] = #612 1'b0;
	C_BUS_expected[3] = #199388 1'b1;
	C_BUS_expected[3] = #612 1'b0;
	C_BUS_expected[3] = #680649 1'b1;
	C_BUS_expected[3] = #499 1'b0;
	C_BUS_expected[3] = #300000 1'b1;
	C_BUS_expected[3] = #345 1'b0;
	C_BUS_expected[3] = #500000 1'b1;
	C_BUS_expected[3] = #18057 1'b0;
	C_BUS_expected[3] = #104307 1'b1;
	C_BUS_expected[3] = #75000 1'b0;
	C_BUS_expected[3] = #1792 1'b1;
	C_BUS_expected[3] = #21273 1'b0;
	C_BUS_expected[3] = #300125 1'b1;
	C_BUS_expected[3] = #99872 1'b0;
	C_BUS_expected[3] = #100125 1'b1;
	C_BUS_expected[3] = #99878 1'b0;
	C_BUS_expected[3] = #300125 1'b1;
	C_BUS_expected[3] = #99872 1'b0;
	C_BUS_expected[3] = #100125 1'b1;
	C_BUS_expected[3] = #78605 1'b0;
	C_BUS_expected[3] = #499 1'b1;
	C_BUS_expected[3] = #18261 1'b0;
	C_BUS_expected[3] = #1604 1'b1;
	C_BUS_expected[3] = #1031 1'b0;
	C_BUS_expected[3] = #97365 1'b1;
	C_BUS_expected[3] = #1493 1'b0;
	C_BUS_expected[3] = #101245 1'b1;
	C_BUS_expected[3] = #452 1'b0;
	C_BUS_expected[3] = #79230 1'b1;
	C_BUS_expected[3] = #19545 1'b0;
	C_BUS_expected[3] = #670 1'b1;
	C_BUS_expected[3] = #100000 1'b0;
	C_BUS_expected[3] = #199892 1'b1;
	C_BUS_expected[3] = #79212 1'b0;
	C_BUS_expected[3] = #345 1'b1;
	C_BUS_expected[3] = #17916 1'b0;
	C_BUS_expected[3] = #1604 1'b1;
	C_BUS_expected[3] = #1031 1'b0;
	C_BUS_expected[3] = #97365 1'b1;
	C_BUS_expected[3] = #1493 1'b0;
	C_BUS_expected[3] = #100896 1'b1;
	C_BUS_expected[3] = #79399 1'b0;
	C_BUS_expected[3] = #20177 1'b1;
	C_BUS_expected[3] = #80119 1'b0;
	C_BUS_expected[3] = #17895 1'b1;
	C_BUS_expected[3] = #612 1'b0;
	C_BUS_expected[3] = #99388 1'b1;
	C_BUS_expected[3] = #4469 1'b0;
	C_BUS_expected[3] = #75000 1'b1;
	C_BUS_expected[3] = #1792 1'b0;
	C_BUS_expected[3] = #118739 1'b1;
	C_BUS_expected[3] = #2399 1'b0;
	C_BUS_expected[3] = #197601 1'b1;
	C_BUS_expected[3] = #2399 1'b0;
end 
// expected C_BUS[ 2 ]
initial
begin
	C_BUS_expected[2] = 1'b0;
	C_BUS_expected[2] = #213202 1'b1;
	C_BUS_expected[2] = #265 1'b0;
	C_BUS_expected[2] = #181200 1'b1;
	C_BUS_expected[2] = #345 1'b0;
	C_BUS_expected[2] = #100000 1'b1;
	C_BUS_expected[2] = #16071 1'b0;
	C_BUS_expected[2] = #406296 1'b1;
	C_BUS_expected[2] = #77288 1'b0;
	C_BUS_expected[2] = #284 1'b1;
	C_BUS_expected[2] = #22049 1'b0;
	C_BUS_expected[2] = #100303 1'b1;
	C_BUS_expected[2] = #177364 1'b0;
	C_BUS_expected[2] = #345 1'b1;
	C_BUS_expected[2] = #16071 1'b0;
	C_BUS_expected[2] = #384449 1'b1;
	C_BUS_expected[2] = #300 1'b0;
	C_BUS_expected[2] = #21474 1'b1;
	C_BUS_expected[2] = #77706 1'b0;
	C_BUS_expected[2] = #18455 1'b1;
	C_BUS_expected[2] = #103192 1'b0;
	C_BUS_expected[2] = #644 1'b1;
	C_BUS_expected[2] = #73 1'b0;
	C_BUS_expected[2] = #77291 1'b1;
	C_BUS_expected[2] = #284 1'b0;
	C_BUS_expected[2] = #300881 1'b1;
	C_BUS_expected[2] = #21113 1'b0;
	C_BUS_expected[2] = #277722 1'b1;
	C_BUS_expected[2] = #345 1'b0;
	C_BUS_expected[2] = #222123 1'b1;
	C_BUS_expected[2] = #78397 1'b0;
	C_BUS_expected[2] = #925 1'b1;
	C_BUS_expected[2] = #20654 1'b0;
	C_BUS_expected[2] = #77901 1'b1;
	C_BUS_expected[2] = #18528 1'b0;
	C_BUS_expected[2] = #2816 1'b1;
	C_BUS_expected[2] = #100303 1'b0;
	C_BUS_expected[2] = #717 1'b1;
	C_BUS_expected[2] = #77291 1'b0;
	C_BUS_expected[2] = #284 1'b1;
	C_BUS_expected[2] = #18575 1'b0;
	C_BUS_expected[2] = #82006 1'b1;
	C_BUS_expected[2] = #925 1'b0;
	C_BUS_expected[2] = #17010 1'b1;
	C_BUS_expected[2] = #282 1'b0;
	C_BUS_expected[2] = #2895 1'b1;
	C_BUS_expected[2] = #96823 1'b0;
	C_BUS_expected[2] = #3434 1'b1;
	C_BUS_expected[2] = #78761 1'b0;
	C_BUS_expected[2] = #469 1'b1;
	C_BUS_expected[2] = #223 1'b0;
	C_BUS_expected[2] = #16856 1'b1;
	C_BUS_expected[2] = #3449 1'b0;
	C_BUS_expected[2] = #644 1'b1;
	C_BUS_expected[2] = #99533 1'b0;
	C_BUS_expected[2] = #467 1'b1;
	C_BUS_expected[2] = #78229 1'b0;
	C_BUS_expected[2] = #925 1'b1;
	C_BUS_expected[2] = #120444 1'b0;
	C_BUS_expected[2] = #294 1'b1;
	C_BUS_expected[2] = #77472 1'b0;
	C_BUS_expected[2] = #345 1'b1;
	C_BUS_expected[2] = #18514 1'b0;
	C_BUS_expected[2] = #1476 1'b1;
	C_BUS_expected[2] = #2374 1'b0;
	C_BUS_expected[2] = #78156 1'b1;
	C_BUS_expected[2] = #925 1'b0;
	C_BUS_expected[2] = #17010 1'b1;
	C_BUS_expected[2] = #282 1'b0;
	C_BUS_expected[2] = #2895 1'b1;
	C_BUS_expected[2] = #96823 1'b0;
	C_BUS_expected[2] = #2325 1'b1;
	C_BUS_expected[2] = #79870 1'b0;
	C_BUS_expected[2] = #17548 1'b1;
	C_BUS_expected[2] = #3449 1'b0;
	C_BUS_expected[2] = #644 1'b1;
	C_BUS_expected[2] = #77709 1'b0;
	C_BUS_expected[2] = #120029 1'b1;
	C_BUS_expected[2] = #1618 1'b0;
	C_BUS_expected[2] = #644 1'b1;
	C_BUS_expected[2] = #73 1'b0;
	C_BUS_expected[2] = #77291 1'b1;
	C_BUS_expected[2] = #284 1'b0;
	C_BUS_expected[2] = #18251 1'b1;
	C_BUS_expected[2] = #265 1'b0;
	C_BUS_expected[2] = #101574 1'b1;
	C_BUS_expected[2] = #1618 1'b0;
	C_BUS_expected[2] = #96543 1'b1;
	C_BUS_expected[2] = #265 1'b0;
	C_BUS_expected[2] = #101574 1'b1;
	C_BUS_expected[2] = #1618 1'b0;
	C_BUS_expected[2] = #78008 1'b1;
	C_BUS_expected[2] = #345 1'b0;
	C_BUS_expected[2] = #18190 1'b1;
	C_BUS_expected[2] = #265 1'b0;
end 
// expected C_BUS[ 1 ]
initial
begin
	C_BUS_expected[1] = 1'b0;
	C_BUS_expected[1] = #194043 1'b1;
	C_BUS_expected[1] = #19845 1'b0;
	C_BUS_expected[1] = #102088 1'b1;
	C_BUS_expected[1] = #178067 1'b0;
	C_BUS_expected[1] = #400820 1'b1;
	C_BUS_expected[1] = #22037 1'b0;
	C_BUS_expected[1] = #197564 1'b1;
	C_BUS_expected[1] = #1512 1'b0;
	C_BUS_expected[1] = #78067 1'b1;
	C_BUS_expected[1] = #116949 1'b0;
	C_BUS_expected[1] = #203472 1'b1;
	C_BUS_expected[1] = #975 1'b0;
	C_BUS_expected[1] = #100727 1'b1;
	C_BUS_expected[1] = #100407 1'b0;
	C_BUS_expected[1] = #327 1'b1;
	C_BUS_expected[1] = #77143 1'b0;
	C_BUS_expected[1] = #19226 1'b1;
	C_BUS_expected[1] = #3549 1'b0;
	C_BUS_expected[1] = #97646 1'b1;
	C_BUS_expected[1] = #2433 1'b0;
	C_BUS_expected[1] = #297304 1'b1;
	C_BUS_expected[1] = #1238 1'b0;
	C_BUS_expected[1] = #1070 1'b1;
	C_BUS_expected[1] = #78354 1'b0;
	C_BUS_expected[1] = #21113 1'b1;
	C_BUS_expected[1] = #597 1'b0;
	C_BUS_expected[1] = #77470 1'b1;
	C_BUS_expected[1] = #19845 1'b0;
	C_BUS_expected[1] = #100576 1'b1;
	C_BUS_expected[1] = #102357 1'b0;
	C_BUS_expected[1] = #98942 1'b1;
	C_BUS_expected[1] = #99680 1'b0;
	C_BUS_expected[1] = #723 1'b1;
	C_BUS_expected[1] = #343 1'b0;
	C_BUS_expected[1] = #100391 1'b1;
	C_BUS_expected[1] = #77143 1'b0;
	C_BUS_expected[1] = #19226 1'b1;
	C_BUS_expected[1] = #3549 1'b0;
	C_BUS_expected[1] = #97646 1'b1;
	C_BUS_expected[1] = #2433 1'b0;
	C_BUS_expected[1] = #96068 1'b1;
	C_BUS_expected[1] = #100000 1'b0;
	C_BUS_expected[1] = #304 1'b1;
	C_BUS_expected[1] = #3225 1'b0;
	C_BUS_expected[1] = #97970 1'b1;
	C_BUS_expected[1] = #101528 1'b0;
	C_BUS_expected[1] = #78051 1'b1;
	C_BUS_expected[1] = #22314 1'b0;
	C_BUS_expected[1] = #99598 1'b1;
	C_BUS_expected[1] = #97314 1'b0;
	C_BUS_expected[1] = #619 1'b1;
	C_BUS_expected[1] = #99077 1'b0;
	C_BUS_expected[1] = #3932 1'b1;
	C_BUS_expected[1] = #96068 1'b0;
	C_BUS_expected[1] = #304 1'b1;
	C_BUS_expected[1] = #100000 1'b0;
	C_BUS_expected[1] = #81914 1'b1;
	C_BUS_expected[1] = #17466 1'b0;
	C_BUS_expected[1] = #4248 1'b1;
	C_BUS_expected[1] = #77146 1'b0;
	C_BUS_expected[1] = #121933 1'b1;
	C_BUS_expected[1] = #921 1'b0;
	C_BUS_expected[1] = #277146 1'b1;
	C_BUS_expected[1] = #19845 1'b0;
	C_BUS_expected[1] = #102088 1'b1;
	C_BUS_expected[1] = #97912 1'b0;
end 
// expected C_BUS[ 0 ]
initial
begin
	C_BUS_expected[0] = 1'b0;
	C_BUS_expected[0] = #112884 1'b1;
	C_BUS_expected[0] = #288 1'b0;
	C_BUS_expected[0] = #606 1'b1;
	C_BUS_expected[0] = #80173 1'b0;
	C_BUS_expected[0] = #18337 1'b1;
	C_BUS_expected[0] = #1583 1'b0;
	C_BUS_expected[0] = #99013 1'b1;
	C_BUS_expected[0] = #288 1'b0;
	C_BUS_expected[0] = #606 1'b1;
	C_BUS_expected[0] = #2106 1'b0;
	C_BUS_expected[0] = #78067 1'b1;
	C_BUS_expected[0] = #100000 1'b0;
	C_BUS_expected[0] = #318337 1'b1;
	C_BUS_expected[0] = #82483 1'b0;
	C_BUS_expected[0] = #99180 1'b1;
	C_BUS_expected[0] = #18337 1'b0;
	C_BUS_expected[0] = #3729 1'b1;
	C_BUS_expected[0] = #96739 1'b0;
	C_BUS_expected[0] = #3128 1'b1;
	C_BUS_expected[0] = #78067 1'b0;
	C_BUS_expected[0] = #100000 1'b1;
	C_BUS_expected[0] = #17768 1'b0;
	C_BUS_expected[0] = #100000 1'b1;
	C_BUS_expected[0] = #101165 1'b0;
	C_BUS_expected[0] = #2463 1'b1;
	C_BUS_expected[0] = #96941 1'b0;
	C_BUS_expected[0] = #1037 1'b1;
	C_BUS_expected[0] = #2749 1'b0;
	C_BUS_expected[0] = #78697 1'b1;
	C_BUS_expected[0] = #99180 1'b0;
	C_BUS_expected[0] = #18337 1'b1;
	C_BUS_expected[0] = #100468 1'b0;
	C_BUS_expected[0] = #81195 1'b1;
	C_BUS_expected[0] = #18337 1'b0;
	C_BUS_expected[0] = #103379 1'b1;
	C_BUS_expected[0] = #96621 1'b0;
	C_BUS_expected[0] = #3059 1'b1;
	C_BUS_expected[0] = #79424 1'b0;
	C_BUS_expected[0] = #21113 1'b1;
	C_BUS_expected[0] = #78067 1'b0;
	C_BUS_expected[0] = #18337 1'b1;
	C_BUS_expected[0] = #100468 1'b0;
	C_BUS_expected[0] = #81195 1'b1;
	C_BUS_expected[0] = #18337 1'b0;
	C_BUS_expected[0] = #200000 1'b1;
	C_BUS_expected[0] = #3786 1'b0;
	C_BUS_expected[0] = #78697 1'b1;
	C_BUS_expected[0] = #99180 1'b0;
	C_BUS_expected[0] = #18337 1'b1;
	C_BUS_expected[0] = #100468 1'b0;
	C_BUS_expected[0] = #81195 1'b1;
	C_BUS_expected[0] = #18337 1'b0;
	C_BUS_expected[0] = #1298 1'b1;
	C_BUS_expected[0] = #81185 1'b0;
	C_BUS_expected[0] = #18113 1'b1;
	C_BUS_expected[0] = #99872 1'b0;
	C_BUS_expected[0] = #82537 1'b1;
	C_BUS_expected[0] = #16995 1'b0;
	C_BUS_expected[0] = #1037 1'b1;
	C_BUS_expected[0] = #80626 1'b0;
	C_BUS_expected[0] = #100820 1'b1;
	C_BUS_expected[0] = #17517 1'b0;
	C_BUS_expected[0] = #101583 1'b1;
	C_BUS_expected[0] = #1905 1'b0;
	C_BUS_expected[0] = #78175 1'b1;
	C_BUS_expected[0] = #18337 1'b0;
	C_BUS_expected[0] = #1298 1'b1;
	C_BUS_expected[0] = #81185 1'b0;
	C_BUS_expected[0] = #18113 1'b1;
	C_BUS_expected[0] = #3387 1'b0;
	C_BUS_expected[0] = #196017 1'b1;
	C_BUS_expected[0] = #81663 1'b0;
	C_BUS_expected[0] = #18337 1'b1;
	C_BUS_expected[0] = #1583 1'b0;
	C_BUS_expected[0] = #99013 1'b1;
	C_BUS_expected[0] = #288 1'b0;
	C_BUS_expected[0] = #606 1'b1;
	C_BUS_expected[0] = #2106 1'b0;
	C_BUS_expected[0] = #78067 1'b1;
	C_BUS_expected[0] = #18337 1'b0;
	C_BUS_expected[0] = #100596 1'b1;
	C_BUS_expected[0] = #288 1'b0;
	C_BUS_expected[0] = #606 1'b1;
	C_BUS_expected[0] = #80173 1'b0;
	C_BUS_expected[0] = #18337 1'b1;
	C_BUS_expected[0] = #1583 1'b0;
	C_BUS_expected[0] = #99013 1'b1;
	C_BUS_expected[0] = #288 1'b0;
	C_BUS_expected[0] = #606 1'b1;
	C_BUS_expected[0] = #2106 1'b0;
	C_BUS_expected[0] = #78067 1'b1;
	C_BUS_expected[0] = #18337 1'b0;
end 
// generate trigger
always @(C_BUS_expected or C_BUS or DATA_MEM_ADDR_expected or DATA_MEM_ADDR or DATA_MEM_IN_expected or DATA_MEM_IN or DATA_MEM_OUT_expected or DATA_MEM_OUT or DATA_MEM_write_enable_expected or DATA_MEM_write_enable or MBR_OUT_expected or MBR_OUT or MIR_expected or MIR or MPC_expected or MPC or PC_expected or PC or PROG_MEM_IN_expected or PROG_MEM_IN)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C_BUS = %b | expected DATA_MEM_ADDR = %b | expected DATA_MEM_IN = %b | expected DATA_MEM_OUT = %b | expected DATA_MEM_write_enable = %b | expected MBR_OUT = %b | expected MIR = %b | expected MPC = %b | expected PC = %b | expected PROG_MEM_IN = %b | ",C_BUS_expected_prev,DATA_MEM_ADDR_expected_prev,DATA_MEM_IN_expected_prev,DATA_MEM_OUT_expected_prev,DATA_MEM_write_enable_expected_prev,MBR_OUT_expected_prev,MIR_expected_prev,MPC_expected_prev,PC_expected_prev,PROG_MEM_IN_expected_prev);
	$display("| real C_BUS = %b | real DATA_MEM_ADDR = %b | real DATA_MEM_IN = %b | real DATA_MEM_OUT = %b | real DATA_MEM_write_enable = %b | real MBR_OUT = %b | real MIR = %b | real MPC = %b | real PC = %b | real PROG_MEM_IN = %b | ",C_BUS_prev,DATA_MEM_ADDR_prev,DATA_MEM_IN_prev,DATA_MEM_OUT_prev,DATA_MEM_write_enable_prev,MBR_OUT_prev,MIR_prev,MPC_prev,PC_prev,PROG_MEM_IN_prev);
`endif
	if (
		( C_BUS_expected_prev[0] !== 1'bx ) && ( C_BUS_prev[0] !== C_BUS_expected_prev[0] )
		&& ((C_BUS_expected_prev[0] !== last_C_BUS_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[0] = C_BUS_expected_prev[0];
	end
	if (
		( C_BUS_expected_prev[1] !== 1'bx ) && ( C_BUS_prev[1] !== C_BUS_expected_prev[1] )
		&& ((C_BUS_expected_prev[1] !== last_C_BUS_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[1] = C_BUS_expected_prev[1];
	end
	if (
		( C_BUS_expected_prev[2] !== 1'bx ) && ( C_BUS_prev[2] !== C_BUS_expected_prev[2] )
		&& ((C_BUS_expected_prev[2] !== last_C_BUS_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[2] = C_BUS_expected_prev[2];
	end
	if (
		( C_BUS_expected_prev[3] !== 1'bx ) && ( C_BUS_prev[3] !== C_BUS_expected_prev[3] )
		&& ((C_BUS_expected_prev[3] !== last_C_BUS_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[3] = C_BUS_expected_prev[3];
	end
	if (
		( C_BUS_expected_prev[4] !== 1'bx ) && ( C_BUS_prev[4] !== C_BUS_expected_prev[4] )
		&& ((C_BUS_expected_prev[4] !== last_C_BUS_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[4] = C_BUS_expected_prev[4];
	end
	if (
		( C_BUS_expected_prev[5] !== 1'bx ) && ( C_BUS_prev[5] !== C_BUS_expected_prev[5] )
		&& ((C_BUS_expected_prev[5] !== last_C_BUS_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[5] = C_BUS_expected_prev[5];
	end
	if (
		( C_BUS_expected_prev[6] !== 1'bx ) && ( C_BUS_prev[6] !== C_BUS_expected_prev[6] )
		&& ((C_BUS_expected_prev[6] !== last_C_BUS_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[6] = C_BUS_expected_prev[6];
	end
	if (
		( C_BUS_expected_prev[7] !== 1'bx ) && ( C_BUS_prev[7] !== C_BUS_expected_prev[7] )
		&& ((C_BUS_expected_prev[7] !== last_C_BUS_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[7] = C_BUS_expected_prev[7];
	end
	if (
		( C_BUS_expected_prev[8] !== 1'bx ) && ( C_BUS_prev[8] !== C_BUS_expected_prev[8] )
		&& ((C_BUS_expected_prev[8] !== last_C_BUS_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[8] = C_BUS_expected_prev[8];
	end
	if (
		( C_BUS_expected_prev[9] !== 1'bx ) && ( C_BUS_prev[9] !== C_BUS_expected_prev[9] )
		&& ((C_BUS_expected_prev[9] !== last_C_BUS_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[9] = C_BUS_expected_prev[9];
	end
	if (
		( C_BUS_expected_prev[10] !== 1'bx ) && ( C_BUS_prev[10] !== C_BUS_expected_prev[10] )
		&& ((C_BUS_expected_prev[10] !== last_C_BUS_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[10] = C_BUS_expected_prev[10];
	end
	if (
		( C_BUS_expected_prev[11] !== 1'bx ) && ( C_BUS_prev[11] !== C_BUS_expected_prev[11] )
		&& ((C_BUS_expected_prev[11] !== last_C_BUS_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[11] = C_BUS_expected_prev[11];
	end
	if (
		( C_BUS_expected_prev[12] !== 1'bx ) && ( C_BUS_prev[12] !== C_BUS_expected_prev[12] )
		&& ((C_BUS_expected_prev[12] !== last_C_BUS_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[12] = C_BUS_expected_prev[12];
	end
	if (
		( C_BUS_expected_prev[13] !== 1'bx ) && ( C_BUS_prev[13] !== C_BUS_expected_prev[13] )
		&& ((C_BUS_expected_prev[13] !== last_C_BUS_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[13] = C_BUS_expected_prev[13];
	end
	if (
		( C_BUS_expected_prev[14] !== 1'bx ) && ( C_BUS_prev[14] !== C_BUS_expected_prev[14] )
		&& ((C_BUS_expected_prev[14] !== last_C_BUS_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[14] = C_BUS_expected_prev[14];
	end
	if (
		( C_BUS_expected_prev[15] !== 1'bx ) && ( C_BUS_prev[15] !== C_BUS_expected_prev[15] )
		&& ((C_BUS_expected_prev[15] !== last_C_BUS_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[15] = C_BUS_expected_prev[15];
	end
	if (
		( C_BUS_expected_prev[16] !== 1'bx ) && ( C_BUS_prev[16] !== C_BUS_expected_prev[16] )
		&& ((C_BUS_expected_prev[16] !== last_C_BUS_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[16] = C_BUS_expected_prev[16];
	end
	if (
		( C_BUS_expected_prev[17] !== 1'bx ) && ( C_BUS_prev[17] !== C_BUS_expected_prev[17] )
		&& ((C_BUS_expected_prev[17] !== last_C_BUS_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[17] = C_BUS_expected_prev[17];
	end
	if (
		( C_BUS_expected_prev[18] !== 1'bx ) && ( C_BUS_prev[18] !== C_BUS_expected_prev[18] )
		&& ((C_BUS_expected_prev[18] !== last_C_BUS_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[18] = C_BUS_expected_prev[18];
	end
	if (
		( C_BUS_expected_prev[19] !== 1'bx ) && ( C_BUS_prev[19] !== C_BUS_expected_prev[19] )
		&& ((C_BUS_expected_prev[19] !== last_C_BUS_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[19] = C_BUS_expected_prev[19];
	end
	if (
		( C_BUS_expected_prev[20] !== 1'bx ) && ( C_BUS_prev[20] !== C_BUS_expected_prev[20] )
		&& ((C_BUS_expected_prev[20] !== last_C_BUS_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[20] = C_BUS_expected_prev[20];
	end
	if (
		( C_BUS_expected_prev[21] !== 1'bx ) && ( C_BUS_prev[21] !== C_BUS_expected_prev[21] )
		&& ((C_BUS_expected_prev[21] !== last_C_BUS_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[21] = C_BUS_expected_prev[21];
	end
	if (
		( C_BUS_expected_prev[22] !== 1'bx ) && ( C_BUS_prev[22] !== C_BUS_expected_prev[22] )
		&& ((C_BUS_expected_prev[22] !== last_C_BUS_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[22] = C_BUS_expected_prev[22];
	end
	if (
		( C_BUS_expected_prev[23] !== 1'bx ) && ( C_BUS_prev[23] !== C_BUS_expected_prev[23] )
		&& ((C_BUS_expected_prev[23] !== last_C_BUS_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[23] = C_BUS_expected_prev[23];
	end
	if (
		( C_BUS_expected_prev[24] !== 1'bx ) && ( C_BUS_prev[24] !== C_BUS_expected_prev[24] )
		&& ((C_BUS_expected_prev[24] !== last_C_BUS_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[24] = C_BUS_expected_prev[24];
	end
	if (
		( C_BUS_expected_prev[25] !== 1'bx ) && ( C_BUS_prev[25] !== C_BUS_expected_prev[25] )
		&& ((C_BUS_expected_prev[25] !== last_C_BUS_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[25] = C_BUS_expected_prev[25];
	end
	if (
		( C_BUS_expected_prev[26] !== 1'bx ) && ( C_BUS_prev[26] !== C_BUS_expected_prev[26] )
		&& ((C_BUS_expected_prev[26] !== last_C_BUS_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[26] = C_BUS_expected_prev[26];
	end
	if (
		( C_BUS_expected_prev[27] !== 1'bx ) && ( C_BUS_prev[27] !== C_BUS_expected_prev[27] )
		&& ((C_BUS_expected_prev[27] !== last_C_BUS_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[27] = C_BUS_expected_prev[27];
	end
	if (
		( C_BUS_expected_prev[28] !== 1'bx ) && ( C_BUS_prev[28] !== C_BUS_expected_prev[28] )
		&& ((C_BUS_expected_prev[28] !== last_C_BUS_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[28] = C_BUS_expected_prev[28];
	end
	if (
		( C_BUS_expected_prev[29] !== 1'bx ) && ( C_BUS_prev[29] !== C_BUS_expected_prev[29] )
		&& ((C_BUS_expected_prev[29] !== last_C_BUS_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[29] = C_BUS_expected_prev[29];
	end
	if (
		( C_BUS_expected_prev[30] !== 1'bx ) && ( C_BUS_prev[30] !== C_BUS_expected_prev[30] )
		&& ((C_BUS_expected_prev[30] !== last_C_BUS_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[30] = C_BUS_expected_prev[30];
	end
	if (
		( C_BUS_expected_prev[31] !== 1'bx ) && ( C_BUS_prev[31] !== C_BUS_expected_prev[31] )
		&& ((C_BUS_expected_prev[31] !== last_C_BUS_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_BUS[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_BUS_expected_prev);
		$display ("     Real value = %b", C_BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_BUS_exp[31] = C_BUS_expected_prev[31];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[0] !== 1'bx ) && ( DATA_MEM_ADDR_prev[0] !== DATA_MEM_ADDR_expected_prev[0] )
		&& ((DATA_MEM_ADDR_expected_prev[0] !== last_DATA_MEM_ADDR_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[0] = DATA_MEM_ADDR_expected_prev[0];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[1] !== 1'bx ) && ( DATA_MEM_ADDR_prev[1] !== DATA_MEM_ADDR_expected_prev[1] )
		&& ((DATA_MEM_ADDR_expected_prev[1] !== last_DATA_MEM_ADDR_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[1] = DATA_MEM_ADDR_expected_prev[1];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[2] !== 1'bx ) && ( DATA_MEM_ADDR_prev[2] !== DATA_MEM_ADDR_expected_prev[2] )
		&& ((DATA_MEM_ADDR_expected_prev[2] !== last_DATA_MEM_ADDR_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[2] = DATA_MEM_ADDR_expected_prev[2];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[3] !== 1'bx ) && ( DATA_MEM_ADDR_prev[3] !== DATA_MEM_ADDR_expected_prev[3] )
		&& ((DATA_MEM_ADDR_expected_prev[3] !== last_DATA_MEM_ADDR_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[3] = DATA_MEM_ADDR_expected_prev[3];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[4] !== 1'bx ) && ( DATA_MEM_ADDR_prev[4] !== DATA_MEM_ADDR_expected_prev[4] )
		&& ((DATA_MEM_ADDR_expected_prev[4] !== last_DATA_MEM_ADDR_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[4] = DATA_MEM_ADDR_expected_prev[4];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[5] !== 1'bx ) && ( DATA_MEM_ADDR_prev[5] !== DATA_MEM_ADDR_expected_prev[5] )
		&& ((DATA_MEM_ADDR_expected_prev[5] !== last_DATA_MEM_ADDR_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[5] = DATA_MEM_ADDR_expected_prev[5];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[6] !== 1'bx ) && ( DATA_MEM_ADDR_prev[6] !== DATA_MEM_ADDR_expected_prev[6] )
		&& ((DATA_MEM_ADDR_expected_prev[6] !== last_DATA_MEM_ADDR_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[6] = DATA_MEM_ADDR_expected_prev[6];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[7] !== 1'bx ) && ( DATA_MEM_ADDR_prev[7] !== DATA_MEM_ADDR_expected_prev[7] )
		&& ((DATA_MEM_ADDR_expected_prev[7] !== last_DATA_MEM_ADDR_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[7] = DATA_MEM_ADDR_expected_prev[7];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[8] !== 1'bx ) && ( DATA_MEM_ADDR_prev[8] !== DATA_MEM_ADDR_expected_prev[8] )
		&& ((DATA_MEM_ADDR_expected_prev[8] !== last_DATA_MEM_ADDR_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[8] = DATA_MEM_ADDR_expected_prev[8];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[9] !== 1'bx ) && ( DATA_MEM_ADDR_prev[9] !== DATA_MEM_ADDR_expected_prev[9] )
		&& ((DATA_MEM_ADDR_expected_prev[9] !== last_DATA_MEM_ADDR_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[9] = DATA_MEM_ADDR_expected_prev[9];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[10] !== 1'bx ) && ( DATA_MEM_ADDR_prev[10] !== DATA_MEM_ADDR_expected_prev[10] )
		&& ((DATA_MEM_ADDR_expected_prev[10] !== last_DATA_MEM_ADDR_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[10] = DATA_MEM_ADDR_expected_prev[10];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[11] !== 1'bx ) && ( DATA_MEM_ADDR_prev[11] !== DATA_MEM_ADDR_expected_prev[11] )
		&& ((DATA_MEM_ADDR_expected_prev[11] !== last_DATA_MEM_ADDR_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[11] = DATA_MEM_ADDR_expected_prev[11];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[12] !== 1'bx ) && ( DATA_MEM_ADDR_prev[12] !== DATA_MEM_ADDR_expected_prev[12] )
		&& ((DATA_MEM_ADDR_expected_prev[12] !== last_DATA_MEM_ADDR_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[12] = DATA_MEM_ADDR_expected_prev[12];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[13] !== 1'bx ) && ( DATA_MEM_ADDR_prev[13] !== DATA_MEM_ADDR_expected_prev[13] )
		&& ((DATA_MEM_ADDR_expected_prev[13] !== last_DATA_MEM_ADDR_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[13] = DATA_MEM_ADDR_expected_prev[13];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[14] !== 1'bx ) && ( DATA_MEM_ADDR_prev[14] !== DATA_MEM_ADDR_expected_prev[14] )
		&& ((DATA_MEM_ADDR_expected_prev[14] !== last_DATA_MEM_ADDR_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[14] = DATA_MEM_ADDR_expected_prev[14];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[15] !== 1'bx ) && ( DATA_MEM_ADDR_prev[15] !== DATA_MEM_ADDR_expected_prev[15] )
		&& ((DATA_MEM_ADDR_expected_prev[15] !== last_DATA_MEM_ADDR_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[15] = DATA_MEM_ADDR_expected_prev[15];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[16] !== 1'bx ) && ( DATA_MEM_ADDR_prev[16] !== DATA_MEM_ADDR_expected_prev[16] )
		&& ((DATA_MEM_ADDR_expected_prev[16] !== last_DATA_MEM_ADDR_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[16] = DATA_MEM_ADDR_expected_prev[16];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[17] !== 1'bx ) && ( DATA_MEM_ADDR_prev[17] !== DATA_MEM_ADDR_expected_prev[17] )
		&& ((DATA_MEM_ADDR_expected_prev[17] !== last_DATA_MEM_ADDR_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[17] = DATA_MEM_ADDR_expected_prev[17];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[18] !== 1'bx ) && ( DATA_MEM_ADDR_prev[18] !== DATA_MEM_ADDR_expected_prev[18] )
		&& ((DATA_MEM_ADDR_expected_prev[18] !== last_DATA_MEM_ADDR_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[18] = DATA_MEM_ADDR_expected_prev[18];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[19] !== 1'bx ) && ( DATA_MEM_ADDR_prev[19] !== DATA_MEM_ADDR_expected_prev[19] )
		&& ((DATA_MEM_ADDR_expected_prev[19] !== last_DATA_MEM_ADDR_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[19] = DATA_MEM_ADDR_expected_prev[19];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[20] !== 1'bx ) && ( DATA_MEM_ADDR_prev[20] !== DATA_MEM_ADDR_expected_prev[20] )
		&& ((DATA_MEM_ADDR_expected_prev[20] !== last_DATA_MEM_ADDR_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[20] = DATA_MEM_ADDR_expected_prev[20];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[21] !== 1'bx ) && ( DATA_MEM_ADDR_prev[21] !== DATA_MEM_ADDR_expected_prev[21] )
		&& ((DATA_MEM_ADDR_expected_prev[21] !== last_DATA_MEM_ADDR_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[21] = DATA_MEM_ADDR_expected_prev[21];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[22] !== 1'bx ) && ( DATA_MEM_ADDR_prev[22] !== DATA_MEM_ADDR_expected_prev[22] )
		&& ((DATA_MEM_ADDR_expected_prev[22] !== last_DATA_MEM_ADDR_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[22] = DATA_MEM_ADDR_expected_prev[22];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[23] !== 1'bx ) && ( DATA_MEM_ADDR_prev[23] !== DATA_MEM_ADDR_expected_prev[23] )
		&& ((DATA_MEM_ADDR_expected_prev[23] !== last_DATA_MEM_ADDR_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[23] = DATA_MEM_ADDR_expected_prev[23];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[24] !== 1'bx ) && ( DATA_MEM_ADDR_prev[24] !== DATA_MEM_ADDR_expected_prev[24] )
		&& ((DATA_MEM_ADDR_expected_prev[24] !== last_DATA_MEM_ADDR_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[24] = DATA_MEM_ADDR_expected_prev[24];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[25] !== 1'bx ) && ( DATA_MEM_ADDR_prev[25] !== DATA_MEM_ADDR_expected_prev[25] )
		&& ((DATA_MEM_ADDR_expected_prev[25] !== last_DATA_MEM_ADDR_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[25] = DATA_MEM_ADDR_expected_prev[25];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[26] !== 1'bx ) && ( DATA_MEM_ADDR_prev[26] !== DATA_MEM_ADDR_expected_prev[26] )
		&& ((DATA_MEM_ADDR_expected_prev[26] !== last_DATA_MEM_ADDR_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[26] = DATA_MEM_ADDR_expected_prev[26];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[27] !== 1'bx ) && ( DATA_MEM_ADDR_prev[27] !== DATA_MEM_ADDR_expected_prev[27] )
		&& ((DATA_MEM_ADDR_expected_prev[27] !== last_DATA_MEM_ADDR_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[27] = DATA_MEM_ADDR_expected_prev[27];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[28] !== 1'bx ) && ( DATA_MEM_ADDR_prev[28] !== DATA_MEM_ADDR_expected_prev[28] )
		&& ((DATA_MEM_ADDR_expected_prev[28] !== last_DATA_MEM_ADDR_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[28] = DATA_MEM_ADDR_expected_prev[28];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[29] !== 1'bx ) && ( DATA_MEM_ADDR_prev[29] !== DATA_MEM_ADDR_expected_prev[29] )
		&& ((DATA_MEM_ADDR_expected_prev[29] !== last_DATA_MEM_ADDR_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[29] = DATA_MEM_ADDR_expected_prev[29];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[30] !== 1'bx ) && ( DATA_MEM_ADDR_prev[30] !== DATA_MEM_ADDR_expected_prev[30] )
		&& ((DATA_MEM_ADDR_expected_prev[30] !== last_DATA_MEM_ADDR_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[30] = DATA_MEM_ADDR_expected_prev[30];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[31] !== 1'bx ) && ( DATA_MEM_ADDR_prev[31] !== DATA_MEM_ADDR_expected_prev[31] )
		&& ((DATA_MEM_ADDR_expected_prev[31] !== last_DATA_MEM_ADDR_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_ADDR_exp[31] = DATA_MEM_ADDR_expected_prev[31];
	end
	if (
		( DATA_MEM_OUT_expected_prev[0] !== 1'bx ) && ( DATA_MEM_OUT_prev[0] !== DATA_MEM_OUT_expected_prev[0] )
		&& ((DATA_MEM_OUT_expected_prev[0] !== last_DATA_MEM_OUT_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[0] = DATA_MEM_OUT_expected_prev[0];
	end
	if (
		( DATA_MEM_OUT_expected_prev[1] !== 1'bx ) && ( DATA_MEM_OUT_prev[1] !== DATA_MEM_OUT_expected_prev[1] )
		&& ((DATA_MEM_OUT_expected_prev[1] !== last_DATA_MEM_OUT_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[1] = DATA_MEM_OUT_expected_prev[1];
	end
	if (
		( DATA_MEM_OUT_expected_prev[2] !== 1'bx ) && ( DATA_MEM_OUT_prev[2] !== DATA_MEM_OUT_expected_prev[2] )
		&& ((DATA_MEM_OUT_expected_prev[2] !== last_DATA_MEM_OUT_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[2] = DATA_MEM_OUT_expected_prev[2];
	end
	if (
		( DATA_MEM_OUT_expected_prev[3] !== 1'bx ) && ( DATA_MEM_OUT_prev[3] !== DATA_MEM_OUT_expected_prev[3] )
		&& ((DATA_MEM_OUT_expected_prev[3] !== last_DATA_MEM_OUT_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[3] = DATA_MEM_OUT_expected_prev[3];
	end
	if (
		( DATA_MEM_OUT_expected_prev[4] !== 1'bx ) && ( DATA_MEM_OUT_prev[4] !== DATA_MEM_OUT_expected_prev[4] )
		&& ((DATA_MEM_OUT_expected_prev[4] !== last_DATA_MEM_OUT_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[4] = DATA_MEM_OUT_expected_prev[4];
	end
	if (
		( DATA_MEM_OUT_expected_prev[5] !== 1'bx ) && ( DATA_MEM_OUT_prev[5] !== DATA_MEM_OUT_expected_prev[5] )
		&& ((DATA_MEM_OUT_expected_prev[5] !== last_DATA_MEM_OUT_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[5] = DATA_MEM_OUT_expected_prev[5];
	end
	if (
		( DATA_MEM_OUT_expected_prev[6] !== 1'bx ) && ( DATA_MEM_OUT_prev[6] !== DATA_MEM_OUT_expected_prev[6] )
		&& ((DATA_MEM_OUT_expected_prev[6] !== last_DATA_MEM_OUT_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[6] = DATA_MEM_OUT_expected_prev[6];
	end
	if (
		( DATA_MEM_OUT_expected_prev[7] !== 1'bx ) && ( DATA_MEM_OUT_prev[7] !== DATA_MEM_OUT_expected_prev[7] )
		&& ((DATA_MEM_OUT_expected_prev[7] !== last_DATA_MEM_OUT_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[7] = DATA_MEM_OUT_expected_prev[7];
	end
	if (
		( DATA_MEM_OUT_expected_prev[8] !== 1'bx ) && ( DATA_MEM_OUT_prev[8] !== DATA_MEM_OUT_expected_prev[8] )
		&& ((DATA_MEM_OUT_expected_prev[8] !== last_DATA_MEM_OUT_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[8] = DATA_MEM_OUT_expected_prev[8];
	end
	if (
		( DATA_MEM_OUT_expected_prev[9] !== 1'bx ) && ( DATA_MEM_OUT_prev[9] !== DATA_MEM_OUT_expected_prev[9] )
		&& ((DATA_MEM_OUT_expected_prev[9] !== last_DATA_MEM_OUT_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[9] = DATA_MEM_OUT_expected_prev[9];
	end
	if (
		( DATA_MEM_OUT_expected_prev[10] !== 1'bx ) && ( DATA_MEM_OUT_prev[10] !== DATA_MEM_OUT_expected_prev[10] )
		&& ((DATA_MEM_OUT_expected_prev[10] !== last_DATA_MEM_OUT_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[10] = DATA_MEM_OUT_expected_prev[10];
	end
	if (
		( DATA_MEM_OUT_expected_prev[11] !== 1'bx ) && ( DATA_MEM_OUT_prev[11] !== DATA_MEM_OUT_expected_prev[11] )
		&& ((DATA_MEM_OUT_expected_prev[11] !== last_DATA_MEM_OUT_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[11] = DATA_MEM_OUT_expected_prev[11];
	end
	if (
		( DATA_MEM_OUT_expected_prev[12] !== 1'bx ) && ( DATA_MEM_OUT_prev[12] !== DATA_MEM_OUT_expected_prev[12] )
		&& ((DATA_MEM_OUT_expected_prev[12] !== last_DATA_MEM_OUT_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[12] = DATA_MEM_OUT_expected_prev[12];
	end
	if (
		( DATA_MEM_OUT_expected_prev[13] !== 1'bx ) && ( DATA_MEM_OUT_prev[13] !== DATA_MEM_OUT_expected_prev[13] )
		&& ((DATA_MEM_OUT_expected_prev[13] !== last_DATA_MEM_OUT_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[13] = DATA_MEM_OUT_expected_prev[13];
	end
	if (
		( DATA_MEM_OUT_expected_prev[14] !== 1'bx ) && ( DATA_MEM_OUT_prev[14] !== DATA_MEM_OUT_expected_prev[14] )
		&& ((DATA_MEM_OUT_expected_prev[14] !== last_DATA_MEM_OUT_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[14] = DATA_MEM_OUT_expected_prev[14];
	end
	if (
		( DATA_MEM_OUT_expected_prev[15] !== 1'bx ) && ( DATA_MEM_OUT_prev[15] !== DATA_MEM_OUT_expected_prev[15] )
		&& ((DATA_MEM_OUT_expected_prev[15] !== last_DATA_MEM_OUT_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[15] = DATA_MEM_OUT_expected_prev[15];
	end
	if (
		( DATA_MEM_OUT_expected_prev[16] !== 1'bx ) && ( DATA_MEM_OUT_prev[16] !== DATA_MEM_OUT_expected_prev[16] )
		&& ((DATA_MEM_OUT_expected_prev[16] !== last_DATA_MEM_OUT_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[16] = DATA_MEM_OUT_expected_prev[16];
	end
	if (
		( DATA_MEM_OUT_expected_prev[17] !== 1'bx ) && ( DATA_MEM_OUT_prev[17] !== DATA_MEM_OUT_expected_prev[17] )
		&& ((DATA_MEM_OUT_expected_prev[17] !== last_DATA_MEM_OUT_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[17] = DATA_MEM_OUT_expected_prev[17];
	end
	if (
		( DATA_MEM_OUT_expected_prev[18] !== 1'bx ) && ( DATA_MEM_OUT_prev[18] !== DATA_MEM_OUT_expected_prev[18] )
		&& ((DATA_MEM_OUT_expected_prev[18] !== last_DATA_MEM_OUT_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[18] = DATA_MEM_OUT_expected_prev[18];
	end
	if (
		( DATA_MEM_OUT_expected_prev[19] !== 1'bx ) && ( DATA_MEM_OUT_prev[19] !== DATA_MEM_OUT_expected_prev[19] )
		&& ((DATA_MEM_OUT_expected_prev[19] !== last_DATA_MEM_OUT_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[19] = DATA_MEM_OUT_expected_prev[19];
	end
	if (
		( DATA_MEM_OUT_expected_prev[20] !== 1'bx ) && ( DATA_MEM_OUT_prev[20] !== DATA_MEM_OUT_expected_prev[20] )
		&& ((DATA_MEM_OUT_expected_prev[20] !== last_DATA_MEM_OUT_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[20] = DATA_MEM_OUT_expected_prev[20];
	end
	if (
		( DATA_MEM_OUT_expected_prev[21] !== 1'bx ) && ( DATA_MEM_OUT_prev[21] !== DATA_MEM_OUT_expected_prev[21] )
		&& ((DATA_MEM_OUT_expected_prev[21] !== last_DATA_MEM_OUT_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[21] = DATA_MEM_OUT_expected_prev[21];
	end
	if (
		( DATA_MEM_OUT_expected_prev[22] !== 1'bx ) && ( DATA_MEM_OUT_prev[22] !== DATA_MEM_OUT_expected_prev[22] )
		&& ((DATA_MEM_OUT_expected_prev[22] !== last_DATA_MEM_OUT_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[22] = DATA_MEM_OUT_expected_prev[22];
	end
	if (
		( DATA_MEM_OUT_expected_prev[23] !== 1'bx ) && ( DATA_MEM_OUT_prev[23] !== DATA_MEM_OUT_expected_prev[23] )
		&& ((DATA_MEM_OUT_expected_prev[23] !== last_DATA_MEM_OUT_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[23] = DATA_MEM_OUT_expected_prev[23];
	end
	if (
		( DATA_MEM_OUT_expected_prev[24] !== 1'bx ) && ( DATA_MEM_OUT_prev[24] !== DATA_MEM_OUT_expected_prev[24] )
		&& ((DATA_MEM_OUT_expected_prev[24] !== last_DATA_MEM_OUT_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[24] = DATA_MEM_OUT_expected_prev[24];
	end
	if (
		( DATA_MEM_OUT_expected_prev[25] !== 1'bx ) && ( DATA_MEM_OUT_prev[25] !== DATA_MEM_OUT_expected_prev[25] )
		&& ((DATA_MEM_OUT_expected_prev[25] !== last_DATA_MEM_OUT_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[25] = DATA_MEM_OUT_expected_prev[25];
	end
	if (
		( DATA_MEM_OUT_expected_prev[26] !== 1'bx ) && ( DATA_MEM_OUT_prev[26] !== DATA_MEM_OUT_expected_prev[26] )
		&& ((DATA_MEM_OUT_expected_prev[26] !== last_DATA_MEM_OUT_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[26] = DATA_MEM_OUT_expected_prev[26];
	end
	if (
		( DATA_MEM_OUT_expected_prev[27] !== 1'bx ) && ( DATA_MEM_OUT_prev[27] !== DATA_MEM_OUT_expected_prev[27] )
		&& ((DATA_MEM_OUT_expected_prev[27] !== last_DATA_MEM_OUT_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[27] = DATA_MEM_OUT_expected_prev[27];
	end
	if (
		( DATA_MEM_OUT_expected_prev[28] !== 1'bx ) && ( DATA_MEM_OUT_prev[28] !== DATA_MEM_OUT_expected_prev[28] )
		&& ((DATA_MEM_OUT_expected_prev[28] !== last_DATA_MEM_OUT_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[28] = DATA_MEM_OUT_expected_prev[28];
	end
	if (
		( DATA_MEM_OUT_expected_prev[29] !== 1'bx ) && ( DATA_MEM_OUT_prev[29] !== DATA_MEM_OUT_expected_prev[29] )
		&& ((DATA_MEM_OUT_expected_prev[29] !== last_DATA_MEM_OUT_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[29] = DATA_MEM_OUT_expected_prev[29];
	end
	if (
		( DATA_MEM_OUT_expected_prev[30] !== 1'bx ) && ( DATA_MEM_OUT_prev[30] !== DATA_MEM_OUT_expected_prev[30] )
		&& ((DATA_MEM_OUT_expected_prev[30] !== last_DATA_MEM_OUT_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[30] = DATA_MEM_OUT_expected_prev[30];
	end
	if (
		( DATA_MEM_OUT_expected_prev[31] !== 1'bx ) && ( DATA_MEM_OUT_prev[31] !== DATA_MEM_OUT_expected_prev[31] )
		&& ((DATA_MEM_OUT_expected_prev[31] !== last_DATA_MEM_OUT_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[31] = DATA_MEM_OUT_expected_prev[31];
	end
	if (
		( DATA_MEM_write_enable_expected_prev !== 1'bx ) && ( DATA_MEM_write_enable_prev !== DATA_MEM_write_enable_expected_prev )
		&& ((DATA_MEM_write_enable_expected_prev !== last_DATA_MEM_write_enable_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_write_enable :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_write_enable_expected_prev);
		$display ("     Real value = %b", DATA_MEM_write_enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_write_enable_exp = DATA_MEM_write_enable_expected_prev;
	end
	if (
		( MBR_OUT_expected_prev[0] !== 1'bx ) && ( MBR_OUT_prev[0] !== MBR_OUT_expected_prev[0] )
		&& ((MBR_OUT_expected_prev[0] !== last_MBR_OUT_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MBR_OUT_exp[0] = MBR_OUT_expected_prev[0];
	end
	if (
		( MBR_OUT_expected_prev[1] !== 1'bx ) && ( MBR_OUT_prev[1] !== MBR_OUT_expected_prev[1] )
		&& ((MBR_OUT_expected_prev[1] !== last_MBR_OUT_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MBR_OUT_exp[1] = MBR_OUT_expected_prev[1];
	end
	if (
		( MBR_OUT_expected_prev[2] !== 1'bx ) && ( MBR_OUT_prev[2] !== MBR_OUT_expected_prev[2] )
		&& ((MBR_OUT_expected_prev[2] !== last_MBR_OUT_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MBR_OUT_exp[2] = MBR_OUT_expected_prev[2];
	end
	if (
		( MBR_OUT_expected_prev[3] !== 1'bx ) && ( MBR_OUT_prev[3] !== MBR_OUT_expected_prev[3] )
		&& ((MBR_OUT_expected_prev[3] !== last_MBR_OUT_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MBR_OUT_exp[3] = MBR_OUT_expected_prev[3];
	end
	if (
		( MBR_OUT_expected_prev[4] !== 1'bx ) && ( MBR_OUT_prev[4] !== MBR_OUT_expected_prev[4] )
		&& ((MBR_OUT_expected_prev[4] !== last_MBR_OUT_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MBR_OUT_exp[4] = MBR_OUT_expected_prev[4];
	end
	if (
		( MBR_OUT_expected_prev[5] !== 1'bx ) && ( MBR_OUT_prev[5] !== MBR_OUT_expected_prev[5] )
		&& ((MBR_OUT_expected_prev[5] !== last_MBR_OUT_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MBR_OUT_exp[5] = MBR_OUT_expected_prev[5];
	end
	if (
		( MBR_OUT_expected_prev[6] !== 1'bx ) && ( MBR_OUT_prev[6] !== MBR_OUT_expected_prev[6] )
		&& ((MBR_OUT_expected_prev[6] !== last_MBR_OUT_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MBR_OUT_exp[6] = MBR_OUT_expected_prev[6];
	end
	if (
		( MBR_OUT_expected_prev[7] !== 1'bx ) && ( MBR_OUT_prev[7] !== MBR_OUT_expected_prev[7] )
		&& ((MBR_OUT_expected_prev[7] !== last_MBR_OUT_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MBR_OUT_exp[7] = MBR_OUT_expected_prev[7];
	end
	if (
		( MIR_expected_prev[0] !== 1'bx ) && ( MIR_prev[0] !== MIR_expected_prev[0] )
		&& ((MIR_expected_prev[0] !== last_MIR_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[0] = MIR_expected_prev[0];
	end
	if (
		( MIR_expected_prev[1] !== 1'bx ) && ( MIR_prev[1] !== MIR_expected_prev[1] )
		&& ((MIR_expected_prev[1] !== last_MIR_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[1] = MIR_expected_prev[1];
	end
	if (
		( MIR_expected_prev[2] !== 1'bx ) && ( MIR_prev[2] !== MIR_expected_prev[2] )
		&& ((MIR_expected_prev[2] !== last_MIR_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[2] = MIR_expected_prev[2];
	end
	if (
		( MIR_expected_prev[3] !== 1'bx ) && ( MIR_prev[3] !== MIR_expected_prev[3] )
		&& ((MIR_expected_prev[3] !== last_MIR_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[3] = MIR_expected_prev[3];
	end
	if (
		( MIR_expected_prev[4] !== 1'bx ) && ( MIR_prev[4] !== MIR_expected_prev[4] )
		&& ((MIR_expected_prev[4] !== last_MIR_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[4] = MIR_expected_prev[4];
	end
	if (
		( MIR_expected_prev[5] !== 1'bx ) && ( MIR_prev[5] !== MIR_expected_prev[5] )
		&& ((MIR_expected_prev[5] !== last_MIR_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[5] = MIR_expected_prev[5];
	end
	if (
		( MIR_expected_prev[6] !== 1'bx ) && ( MIR_prev[6] !== MIR_expected_prev[6] )
		&& ((MIR_expected_prev[6] !== last_MIR_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[6] = MIR_expected_prev[6];
	end
	if (
		( MIR_expected_prev[7] !== 1'bx ) && ( MIR_prev[7] !== MIR_expected_prev[7] )
		&& ((MIR_expected_prev[7] !== last_MIR_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[7] = MIR_expected_prev[7];
	end
	if (
		( MIR_expected_prev[8] !== 1'bx ) && ( MIR_prev[8] !== MIR_expected_prev[8] )
		&& ((MIR_expected_prev[8] !== last_MIR_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[8] = MIR_expected_prev[8];
	end
	if (
		( MIR_expected_prev[9] !== 1'bx ) && ( MIR_prev[9] !== MIR_expected_prev[9] )
		&& ((MIR_expected_prev[9] !== last_MIR_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[9] = MIR_expected_prev[9];
	end
	if (
		( MIR_expected_prev[10] !== 1'bx ) && ( MIR_prev[10] !== MIR_expected_prev[10] )
		&& ((MIR_expected_prev[10] !== last_MIR_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[10] = MIR_expected_prev[10];
	end
	if (
		( MIR_expected_prev[11] !== 1'bx ) && ( MIR_prev[11] !== MIR_expected_prev[11] )
		&& ((MIR_expected_prev[11] !== last_MIR_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[11] = MIR_expected_prev[11];
	end
	if (
		( MIR_expected_prev[12] !== 1'bx ) && ( MIR_prev[12] !== MIR_expected_prev[12] )
		&& ((MIR_expected_prev[12] !== last_MIR_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[12] = MIR_expected_prev[12];
	end
	if (
		( MIR_expected_prev[13] !== 1'bx ) && ( MIR_prev[13] !== MIR_expected_prev[13] )
		&& ((MIR_expected_prev[13] !== last_MIR_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[13] = MIR_expected_prev[13];
	end
	if (
		( MIR_expected_prev[14] !== 1'bx ) && ( MIR_prev[14] !== MIR_expected_prev[14] )
		&& ((MIR_expected_prev[14] !== last_MIR_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[14] = MIR_expected_prev[14];
	end
	if (
		( MIR_expected_prev[15] !== 1'bx ) && ( MIR_prev[15] !== MIR_expected_prev[15] )
		&& ((MIR_expected_prev[15] !== last_MIR_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[15] = MIR_expected_prev[15];
	end
	if (
		( MIR_expected_prev[16] !== 1'bx ) && ( MIR_prev[16] !== MIR_expected_prev[16] )
		&& ((MIR_expected_prev[16] !== last_MIR_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[16] = MIR_expected_prev[16];
	end
	if (
		( MIR_expected_prev[17] !== 1'bx ) && ( MIR_prev[17] !== MIR_expected_prev[17] )
		&& ((MIR_expected_prev[17] !== last_MIR_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[17] = MIR_expected_prev[17];
	end
	if (
		( MIR_expected_prev[18] !== 1'bx ) && ( MIR_prev[18] !== MIR_expected_prev[18] )
		&& ((MIR_expected_prev[18] !== last_MIR_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[18] = MIR_expected_prev[18];
	end
	if (
		( MIR_expected_prev[19] !== 1'bx ) && ( MIR_prev[19] !== MIR_expected_prev[19] )
		&& ((MIR_expected_prev[19] !== last_MIR_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[19] = MIR_expected_prev[19];
	end
	if (
		( MIR_expected_prev[20] !== 1'bx ) && ( MIR_prev[20] !== MIR_expected_prev[20] )
		&& ((MIR_expected_prev[20] !== last_MIR_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[20] = MIR_expected_prev[20];
	end
	if (
		( MIR_expected_prev[21] !== 1'bx ) && ( MIR_prev[21] !== MIR_expected_prev[21] )
		&& ((MIR_expected_prev[21] !== last_MIR_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[21] = MIR_expected_prev[21];
	end
	if (
		( MIR_expected_prev[22] !== 1'bx ) && ( MIR_prev[22] !== MIR_expected_prev[22] )
		&& ((MIR_expected_prev[22] !== last_MIR_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[22] = MIR_expected_prev[22];
	end
	if (
		( MIR_expected_prev[23] !== 1'bx ) && ( MIR_prev[23] !== MIR_expected_prev[23] )
		&& ((MIR_expected_prev[23] !== last_MIR_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[23] = MIR_expected_prev[23];
	end
	if (
		( MIR_expected_prev[24] !== 1'bx ) && ( MIR_prev[24] !== MIR_expected_prev[24] )
		&& ((MIR_expected_prev[24] !== last_MIR_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[24] = MIR_expected_prev[24];
	end
	if (
		( MIR_expected_prev[25] !== 1'bx ) && ( MIR_prev[25] !== MIR_expected_prev[25] )
		&& ((MIR_expected_prev[25] !== last_MIR_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[25] = MIR_expected_prev[25];
	end
	if (
		( MIR_expected_prev[26] !== 1'bx ) && ( MIR_prev[26] !== MIR_expected_prev[26] )
		&& ((MIR_expected_prev[26] !== last_MIR_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[26] = MIR_expected_prev[26];
	end
	if (
		( MIR_expected_prev[27] !== 1'bx ) && ( MIR_prev[27] !== MIR_expected_prev[27] )
		&& ((MIR_expected_prev[27] !== last_MIR_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[27] = MIR_expected_prev[27];
	end
	if (
		( MIR_expected_prev[28] !== 1'bx ) && ( MIR_prev[28] !== MIR_expected_prev[28] )
		&& ((MIR_expected_prev[28] !== last_MIR_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[28] = MIR_expected_prev[28];
	end
	if (
		( MIR_expected_prev[29] !== 1'bx ) && ( MIR_prev[29] !== MIR_expected_prev[29] )
		&& ((MIR_expected_prev[29] !== last_MIR_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[29] = MIR_expected_prev[29];
	end
	if (
		( MIR_expected_prev[30] !== 1'bx ) && ( MIR_prev[30] !== MIR_expected_prev[30] )
		&& ((MIR_expected_prev[30] !== last_MIR_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[30] = MIR_expected_prev[30];
	end
	if (
		( MIR_expected_prev[31] !== 1'bx ) && ( MIR_prev[31] !== MIR_expected_prev[31] )
		&& ((MIR_expected_prev[31] !== last_MIR_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[31] = MIR_expected_prev[31];
	end
	if (
		( MIR_expected_prev[32] !== 1'bx ) && ( MIR_prev[32] !== MIR_expected_prev[32] )
		&& ((MIR_expected_prev[32] !== last_MIR_exp[32]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[32] = MIR_expected_prev[32];
	end
	if (
		( MIR_expected_prev[33] !== 1'bx ) && ( MIR_prev[33] !== MIR_expected_prev[33] )
		&& ((MIR_expected_prev[33] !== last_MIR_exp[33]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[33] = MIR_expected_prev[33];
	end
	if (
		( MIR_expected_prev[34] !== 1'bx ) && ( MIR_prev[34] !== MIR_expected_prev[34] )
		&& ((MIR_expected_prev[34] !== last_MIR_exp[34]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[34] = MIR_expected_prev[34];
	end
	if (
		( MIR_expected_prev[35] !== 1'bx ) && ( MIR_prev[35] !== MIR_expected_prev[35] )
		&& ((MIR_expected_prev[35] !== last_MIR_exp[35]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[35] = MIR_expected_prev[35];
	end
	if (
		( MPC_expected_prev[0] !== 1'bx ) && ( MPC_prev[0] !== MPC_expected_prev[0] )
		&& ((MPC_expected_prev[0] !== last_MPC_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[0] = MPC_expected_prev[0];
	end
	if (
		( MPC_expected_prev[1] !== 1'bx ) && ( MPC_prev[1] !== MPC_expected_prev[1] )
		&& ((MPC_expected_prev[1] !== last_MPC_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[1] = MPC_expected_prev[1];
	end
	if (
		( MPC_expected_prev[2] !== 1'bx ) && ( MPC_prev[2] !== MPC_expected_prev[2] )
		&& ((MPC_expected_prev[2] !== last_MPC_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[2] = MPC_expected_prev[2];
	end
	if (
		( MPC_expected_prev[3] !== 1'bx ) && ( MPC_prev[3] !== MPC_expected_prev[3] )
		&& ((MPC_expected_prev[3] !== last_MPC_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[3] = MPC_expected_prev[3];
	end
	if (
		( MPC_expected_prev[4] !== 1'bx ) && ( MPC_prev[4] !== MPC_expected_prev[4] )
		&& ((MPC_expected_prev[4] !== last_MPC_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[4] = MPC_expected_prev[4];
	end
	if (
		( MPC_expected_prev[5] !== 1'bx ) && ( MPC_prev[5] !== MPC_expected_prev[5] )
		&& ((MPC_expected_prev[5] !== last_MPC_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[5] = MPC_expected_prev[5];
	end
	if (
		( MPC_expected_prev[6] !== 1'bx ) && ( MPC_prev[6] !== MPC_expected_prev[6] )
		&& ((MPC_expected_prev[6] !== last_MPC_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[6] = MPC_expected_prev[6];
	end
	if (
		( MPC_expected_prev[7] !== 1'bx ) && ( MPC_prev[7] !== MPC_expected_prev[7] )
		&& ((MPC_expected_prev[7] !== last_MPC_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[7] = MPC_expected_prev[7];
	end
	if (
		( MPC_expected_prev[8] !== 1'bx ) && ( MPC_prev[8] !== MPC_expected_prev[8] )
		&& ((MPC_expected_prev[8] !== last_MPC_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[8] = MPC_expected_prev[8];
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( PC_expected_prev[8] !== 1'bx ) && ( PC_prev[8] !== PC_expected_prev[8] )
		&& ((PC_expected_prev[8] !== last_PC_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[8] = PC_expected_prev[8];
	end
	if (
		( PC_expected_prev[9] !== 1'bx ) && ( PC_prev[9] !== PC_expected_prev[9] )
		&& ((PC_expected_prev[9] !== last_PC_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[9] = PC_expected_prev[9];
	end
	if (
		( PC_expected_prev[10] !== 1'bx ) && ( PC_prev[10] !== PC_expected_prev[10] )
		&& ((PC_expected_prev[10] !== last_PC_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[10] = PC_expected_prev[10];
	end
	if (
		( PC_expected_prev[11] !== 1'bx ) && ( PC_prev[11] !== PC_expected_prev[11] )
		&& ((PC_expected_prev[11] !== last_PC_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[11] = PC_expected_prev[11];
	end
	if (
		( PC_expected_prev[12] !== 1'bx ) && ( PC_prev[12] !== PC_expected_prev[12] )
		&& ((PC_expected_prev[12] !== last_PC_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[12] = PC_expected_prev[12];
	end
	if (
		( PC_expected_prev[13] !== 1'bx ) && ( PC_prev[13] !== PC_expected_prev[13] )
		&& ((PC_expected_prev[13] !== last_PC_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[13] = PC_expected_prev[13];
	end
	if (
		( PC_expected_prev[14] !== 1'bx ) && ( PC_prev[14] !== PC_expected_prev[14] )
		&& ((PC_expected_prev[14] !== last_PC_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[14] = PC_expected_prev[14];
	end
	if (
		( PC_expected_prev[15] !== 1'bx ) && ( PC_prev[15] !== PC_expected_prev[15] )
		&& ((PC_expected_prev[15] !== last_PC_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[15] = PC_expected_prev[15];
	end
	if (
		( PC_expected_prev[16] !== 1'bx ) && ( PC_prev[16] !== PC_expected_prev[16] )
		&& ((PC_expected_prev[16] !== last_PC_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[16] = PC_expected_prev[16];
	end
	if (
		( PC_expected_prev[17] !== 1'bx ) && ( PC_prev[17] !== PC_expected_prev[17] )
		&& ((PC_expected_prev[17] !== last_PC_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[17] = PC_expected_prev[17];
	end
	if (
		( PC_expected_prev[18] !== 1'bx ) && ( PC_prev[18] !== PC_expected_prev[18] )
		&& ((PC_expected_prev[18] !== last_PC_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[18] = PC_expected_prev[18];
	end
	if (
		( PC_expected_prev[19] !== 1'bx ) && ( PC_prev[19] !== PC_expected_prev[19] )
		&& ((PC_expected_prev[19] !== last_PC_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[19] = PC_expected_prev[19];
	end
	if (
		( PC_expected_prev[20] !== 1'bx ) && ( PC_prev[20] !== PC_expected_prev[20] )
		&& ((PC_expected_prev[20] !== last_PC_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[20] = PC_expected_prev[20];
	end
	if (
		( PC_expected_prev[21] !== 1'bx ) && ( PC_prev[21] !== PC_expected_prev[21] )
		&& ((PC_expected_prev[21] !== last_PC_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[21] = PC_expected_prev[21];
	end
	if (
		( PC_expected_prev[22] !== 1'bx ) && ( PC_prev[22] !== PC_expected_prev[22] )
		&& ((PC_expected_prev[22] !== last_PC_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[22] = PC_expected_prev[22];
	end
	if (
		( PC_expected_prev[23] !== 1'bx ) && ( PC_prev[23] !== PC_expected_prev[23] )
		&& ((PC_expected_prev[23] !== last_PC_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[23] = PC_expected_prev[23];
	end
	if (
		( PC_expected_prev[24] !== 1'bx ) && ( PC_prev[24] !== PC_expected_prev[24] )
		&& ((PC_expected_prev[24] !== last_PC_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[24] = PC_expected_prev[24];
	end
	if (
		( PC_expected_prev[25] !== 1'bx ) && ( PC_prev[25] !== PC_expected_prev[25] )
		&& ((PC_expected_prev[25] !== last_PC_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[25] = PC_expected_prev[25];
	end
	if (
		( PC_expected_prev[26] !== 1'bx ) && ( PC_prev[26] !== PC_expected_prev[26] )
		&& ((PC_expected_prev[26] !== last_PC_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[26] = PC_expected_prev[26];
	end
	if (
		( PC_expected_prev[27] !== 1'bx ) && ( PC_prev[27] !== PC_expected_prev[27] )
		&& ((PC_expected_prev[27] !== last_PC_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[27] = PC_expected_prev[27];
	end
	if (
		( PC_expected_prev[28] !== 1'bx ) && ( PC_prev[28] !== PC_expected_prev[28] )
		&& ((PC_expected_prev[28] !== last_PC_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[28] = PC_expected_prev[28];
	end
	if (
		( PC_expected_prev[29] !== 1'bx ) && ( PC_prev[29] !== PC_expected_prev[29] )
		&& ((PC_expected_prev[29] !== last_PC_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[29] = PC_expected_prev[29];
	end
	if (
		( PC_expected_prev[30] !== 1'bx ) && ( PC_prev[30] !== PC_expected_prev[30] )
		&& ((PC_expected_prev[30] !== last_PC_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[30] = PC_expected_prev[30];
	end
	if (
		( PC_expected_prev[31] !== 1'bx ) && ( PC_prev[31] !== PC_expected_prev[31] )
		&& ((PC_expected_prev[31] !== last_PC_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[31] = PC_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#5000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mic1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg LOADN;
// wires                                               
wire [31:0] C_BUS;
wire [31:0] DATA_MEM_ADDR;
wire [31:0] DATA_MEM_IN;
wire [31:0] DATA_MEM_OUT;
wire DATA_MEM_write_enable;
wire [7:0] MBR_OUT;
wire [35:0] MIR;
wire [8:0] MPC;
wire [31:0] PC;
wire [7:0] PROG_MEM_IN;

wire sampler;                             

// assign statements (if any)                          
mic1 i1 (
// port map - connection between master ports and signals/registers   
	.C_BUS(C_BUS),
	.CLOCK(CLOCK),
	.DATA_MEM_ADDR(DATA_MEM_ADDR),
	.DATA_MEM_IN(DATA_MEM_IN),
	.DATA_MEM_OUT(DATA_MEM_OUT),
	.DATA_MEM_write_enable(DATA_MEM_write_enable),
	.LOADN(LOADN),
	.MBR_OUT(MBR_OUT),
	.MIR(MIR),
	.MPC(MPC),
	.PC(PC),
	.PROG_MEM_IN(PROG_MEM_IN)
);

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #80000 1'b1;
	#20000;
end 

// LOADN
initial
begin
	LOADN = 1'b1;
	LOADN = #10000 1'b0;
end 

mic1_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.LOADN(LOADN),
	.sampler_tx(sampler)
);

mic1_vlg_check_tst tb_out(
	.C_BUS(C_BUS),
	.DATA_MEM_ADDR(DATA_MEM_ADDR),
	.DATA_MEM_IN(DATA_MEM_IN),
	.DATA_MEM_OUT(DATA_MEM_OUT),
	.DATA_MEM_write_enable(DATA_MEM_write_enable),
	.MBR_OUT(MBR_OUT),
	.MIR(MIR),
	.MPC(MPC),
	.PC(PC),
	.PROG_MEM_IN(PROG_MEM_IN),
	.sampler_rx(sampler)
);
endmodule

